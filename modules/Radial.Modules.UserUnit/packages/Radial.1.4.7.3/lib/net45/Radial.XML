<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Radial</name>
    </assembly>
    <members>
        <member name="T:Radial.Base62Encoder">
            <summary>
            Base62 Encoder Class
            </summary>
        </member>
        <member name="F:Radial.Base62Encoder.Alphabet">
            <summary>
            Base62 alphabet.
            </summary>
        </member>
        <member name="M:Radial.Base62Encoder.ToBase62String(System.UInt64)">
            <summary>
            Convert long value to Base62 string.
            </summary>
            <param name="value">The input value.</param>
            <returns>The Base62 string.</returns>
        </member>
        <member name="M:Radial.Base62Encoder.FromBase62String(System.String)">
            <summary>
            Convert Base62 string to long value.
            </summary>
            <param name="input">The input Base62 string.</param>
            <returns>The long value.</returns>
        </member>
        <member name="T:Radial.Boot.StartupHttpModule">
            <summary>
            Startup Http Module
            </summary>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule" />.
            </summary>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application </param>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.context_EndRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the EndRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Radial.Boot.Bootstrapper">
            <summary>
            System bootstrapper.
            </summary>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.RegisterTask(Radial.Boot.IBootTask)">
            <summary>
            Registers boot task.
            </summary>
            <param name="task">The boot task.</param>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.RegisterTask(Radial.Boot.IBootTask,System.Int32)">
            <summary>
            Registers boot task.
            </summary>
            <param name="task">The boot task.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.Initialize">
            <summary>
            System initialize process.
            </summary>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.Start">
            <summary>
            Start system.
            </summary>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.Stop">
            <summary>
            Stop system.
            </summary>
        </member>
        <member name="P:Radial.Boot.Bootstrapper.IsInitialized">
            <summary>
            Gets a value indicating whether system is successful initialized.
            </summary>
            <value>
            <c>true</c> if successful initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Boot.Cfg.BootTaskElement">
            <summary>
            Boot task configuration element
            </summary>
        </member>
        <member name="P:Radial.Boot.Cfg.BootTaskElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Radial.Boot.Cfg.BootTaskElement.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
        </member>
        <member name="T:Radial.Boot.Cfg.BootTaskElementCollection">
            <summary>
            Boot task configuration element collection
            </summary>
        </member>
        <member name="M:Radial.Boot.Cfg.BootTaskElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Radial.Boot.Cfg.BootTaskElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="T:Radial.Boot.Cfg.BootTaskSection">
            <summary>
            Boot task configuration section.
            </summary>
        </member>
        <member name="P:Radial.Boot.Cfg.BootTaskSection.Tasks">
            <summary>
            Gets the boot tasks.
            </summary>
        </member>
        <member name="T:Radial.IO.EasyStream">
            <summary>
            Easy stream.
            </summary>
        </member>
        <member name="T:Radial.IO.EasyStream.Reader">
            <summary>
            Easy stream reader.
            </summary>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetText(System.IO.Stream)">
            <summary>
            Gets stream text.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
            Stream text.
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetText(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Gets stream text.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Stream text.
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetText(System.String)">
            <summary>
            Gets file content text.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            File content text.
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetText(System.String,System.Text.Encoding)">
            <summary>
            Gets file content text.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            File content text.
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetBytes(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Gets stream bytes.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offset">The offset.</param>
            <param name="count">The bytes count.</param>
            <returns>Stream bytes.</returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetBytes(System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Gets stream bytes.
            </summary>
            <param name="stream">The stream.</param>
            <param name="count">The bytes count.</param>
            <returns>
            Stream bytes.
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetBytes(System.String,System.Int32,System.Int32)">
            <summary>
            Gets file content bytes.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="offset">The offset.</param>
            <param name="count">The bytes count.</param>
            <returns>
            File content bytes.
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetBytes(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets file content bytes.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="count">The bytes count.</param>
            <returns>
            File content bytes.
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetLines(System.IO.Stream)">
            <summary>
            Gets stream text lines.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Stream text lines</returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetLines(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Gets stream text lines.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Stream text lines
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetLines(System.String,System.Text.Encoding)">
            <summary>
            Gets file content text lines.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            File content text lines
            </returns>
        </member>
        <member name="M:Radial.IO.EasyStream.Reader.GetLines(System.String)">
            <summary>
            Gets file content text lines.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            File content text lines
            </returns>
        </member>
        <member name="T:Radial.IO.EasyStream.Writer">
            <summary>
            Easy stream writer.
            </summary>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.Save(System.IO.Stream,System.Byte[])">
            <summary>
            Saves bytes to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.Save(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Saves text to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="text">The text.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.Save(System.IO.Stream,System.String)">
            <summary>
            Saves text to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.SaveToFile(System.Byte[],System.String)">
            <summary>
            Saves the content to a file using FileMode.Create.
            </summary>
            <param name="content">The content.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.SaveToFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            Saves the content to a file using FileMode.Create.
            </summary>
            <param name="content">The content.</param>
            <param name="filePath">The file path.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.SaveToFile(System.String,System.String)">
            <summary>
            Saves the content to a file using FileMode.Create.
            </summary>
            <param name="content">The content.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.AppendToFile(System.Byte[],System.String)">
            <summary>
            Appends the content to file.
            </summary>
            <param name="content">The content.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.AppendToFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the content to file.
            </summary>
            <param name="content">The content.</param>
            <param name="filePath">The file path.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Radial.IO.EasyStream.Writer.AppendToFile(System.String,System.String)">
            <summary>
            Appends the content to file.
            </summary>
            <param name="content">The content.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="T:Radial.MultiResult`2">
            <summary>
            Indicate the multiple result values.
            </summary>
            <typeparam name="T1">The type of result value 1.</typeparam>
            <typeparam name="T2">The type of result value 2.</typeparam>
        </member>
        <member name="P:Radial.MultiResult`2.Value1">
            <summary>
            Gets or sets the result value 1.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`2.Value2">
            <summary>
            Gets or sets the result value 2.
            </summary>
        </member>
        <member name="T:Radial.MultiResult`3">
            <summary>
            Indicate the multiple result values.
            </summary>
            <typeparam name="T1">The type of result value 1.</typeparam>
            <typeparam name="T2">The type of result value 2.</typeparam>
            <typeparam name="T3">The type of result value 3.</typeparam>
        </member>
        <member name="P:Radial.MultiResult`3.Value1">
            <summary>
            Gets or sets the result value 1.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`3.Value2">
            <summary>
            Gets or sets the result value 2.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`3.Value3">
            <summary>
            Gets or sets the result value 3.
            </summary>
        </member>
        <member name="T:Radial.MultiResult`4">
            <summary>
            Indicate the multiple result values.
            </summary>
            <typeparam name="T1">The type of result value 1.</typeparam>
            <typeparam name="T2">The type of result value 2.</typeparam>
            <typeparam name="T3">The type of result value 3.</typeparam>
            <typeparam name="T4">The type of result value 4.</typeparam>
        </member>
        <member name="P:Radial.MultiResult`4.Value1">
            <summary>
            Gets or sets the result value 1.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`4.Value2">
            <summary>
            Gets or sets the result value 2.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`4.Value3">
            <summary>
            Gets or sets the result value 3.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`4.Value4">
            <summary>
            Gets or sets the result value 4.
            </summary>
        </member>
        <member name="T:Radial.MultiResult`5">
            <summary>
            Indicate the multiple result values.
            </summary>
            <typeparam name="T1">The type of result value 1.</typeparam>
            <typeparam name="T2">The type of result value 2.</typeparam>
            <typeparam name="T3">The type of result value 3.</typeparam>
            <typeparam name="T4">The type of result value 4.</typeparam>
            <typeparam name="T5">The type of result value 5.</typeparam>
        </member>
        <member name="P:Radial.MultiResult`5.Value1">
            <summary>
            Gets or sets the result value 1.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`5.Value2">
            <summary>
            Gets or sets the result value 2.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`5.Value3">
            <summary>
            Gets or sets the result value 3.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`5.Value4">
            <summary>
            Gets or sets the result value 4.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`5.Value5">
            <summary>
            Gets or sets the result value 5.
            </summary>
        </member>
        <member name="T:Radial.MultiResult`6">
            <summary>
            Indicate the multiple result values.
            </summary>
            <typeparam name="T1">The type of result value 1.</typeparam>
            <typeparam name="T2">The type of result value 2.</typeparam>
            <typeparam name="T3">The type of result value 3.</typeparam>
            <typeparam name="T4">The type of result value 4.</typeparam>
            <typeparam name="T5">The type of result value 5.</typeparam>
            <typeparam name="T6">The type of result value 6.</typeparam>
        </member>
        <member name="P:Radial.MultiResult`6.Value1">
            <summary>
            Gets or sets the result value 1.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`6.Value2">
            <summary>
            Gets or sets the result value 2.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`6.Value3">
            <summary>
            Gets or sets the result value 3.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`6.Value4">
            <summary>
            Gets or sets the result value 4.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`6.Value5">
            <summary>
            Gets or sets the result value 5.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`6.Value6">
            <summary>
            Gets or sets the result value 6.
            </summary>
        </member>
        <member name="T:Radial.MultiResult`7">
            <summary>
            Indicate the multiple result values.
            </summary>
            <typeparam name="T1">The type of result value 1.</typeparam>
            <typeparam name="T2">The type of result value 2.</typeparam>
            <typeparam name="T3">The type of result value 3.</typeparam>
            <typeparam name="T4">The type of result value 4.</typeparam>
            <typeparam name="T5">The type of result value 5.</typeparam>
            <typeparam name="T6">The type of result value 6.</typeparam>
            <typeparam name="T7">The type of result value 7.</typeparam>
        </member>
        <member name="P:Radial.MultiResult`7.Value1">
            <summary>
            Gets or sets the result value 1.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`7.Value2">
            <summary>
            Gets or sets the result value 2.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`7.Value3">
            <summary>
            Gets or sets the result value 3.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`7.Value4">
            <summary>
            Gets or sets the result value 4.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`7.Value5">
            <summary>
            Gets or sets the result value 5.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`7.Value6">
            <summary>
            Gets or sets the result value 6.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`7.Value7">
            <summary>
            Gets or sets the result value 7.
            </summary>
        </member>
        <member name="T:Radial.MultiResult`8">
            <summary>
            Indicate the multiple result values.
            </summary>
            <typeparam name="T1">The type of result value 1.</typeparam>
            <typeparam name="T2">The type of result value 2.</typeparam>
            <typeparam name="T3">The type of result value 3.</typeparam>
            <typeparam name="T4">The type of result value 4.</typeparam>
            <typeparam name="T5">The type of result value 5.</typeparam>
            <typeparam name="T6">The type of result value 6.</typeparam>
            <typeparam name="T7">The type of result value 7.</typeparam>
            <typeparam name="T8">The type of result value 8.</typeparam>
        </member>
        <member name="P:Radial.MultiResult`8.Value1">
            <summary>
            Gets or sets the result value 1.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`8.Value2">
            <summary>
            Gets or sets the result value 2.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`8.Value3">
            <summary>
            Gets or sets the result value 3.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`8.Value4">
            <summary>
            Gets or sets the result value 4.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`8.Value5">
            <summary>
            Gets or sets the result value 5.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`8.Value6">
            <summary>
            Gets or sets the result value 6.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`8.Value7">
            <summary>
            Gets or sets the result value 7.
            </summary>
        </member>
        <member name="P:Radial.MultiResult`8.Value8">
            <summary>
            Gets or sets the result value 8.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.AppStartModule">
            <summary>
            Application startup http module.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.context_EndRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the EndRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.context_Error(System.Object,System.EventArgs)">
            <summary>
            Handles the Error event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.NeedSession(System.Web.HttpApplication)">
            <summary>
            Needs the session.
            </summary>
            <param name="app">The app.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Persist.Nhs.BasicRepository`2">
            <summary>
            Basic class of IRepository
            </summary>
            <typeparam name="TObject">The type of persistent object.</typeparam>
            <typeparam name="TKey">The type of the object key.</typeparam>
        </member>
        <member name="T:Radial.Persist.IRepository`2">
            <summary>
            IRepository interface.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the object key.</typeparam>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Exist(`1)">
            <summary>
            Determine whether the object is exists.
            </summary>
            <param name="key">The object key.</param>
            <returns>
              <c>true</c> if the object is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determine whether contains objects that match The condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
              <c>true</c> if objects that match The condition. is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCount">
            <summary>
            Gets objects count.
            </summary>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects count using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCountInt64">
            <summary>
            Counts objects count.
            </summary>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCountInt64(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects count using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>
            The min value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The min value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The max value.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The max value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The sum value.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The sum value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The average value.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The average value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Find(`1)">
            <summary>
            Find object with the specified key.
            </summary>
            <param name="key">The object key.</param>
            <returns>If data exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find object.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            If data exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindFirst(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <returns>
            <param name="orderBys">The order by snippets</param>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindByKeys(System.Collections.Generic.IEnumerable{`1},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects by keys.
            </summary>
            <param name="keys">The object keys.</param>
            <param name="orderBys">The order by snippets.</param>
            <returns>
            If data exists and keys not empty, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindKeys(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all object keys.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>
            If data exists, return an array, otherwise return an empty array.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Add(`0)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add objects.
            </summary>
            <param name="objs">The objects.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Save(`0)">
            <summary>
            Add or update an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Update(`0)">
            <summary>
            Update an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Remove(`1)">
            <summary>
            Remove an object with the specified key.
            </summary>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Remove(`0)">
            <summary>
            Remove an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Remove object with the specified condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Clear">
            <summary>
            Clear all objects.
            </summary>
        </member>
        <member name="P:Radial.Persist.IRepository`2.Item(`1)">
            <summary>
            Find the object with the specified key.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.#ctor(Radial.Persist.IUnitOfWorkEssential)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.BasicRepository`2"/> class.
            </summary>
            <param name="uow">The IUnitOfWorkEssential instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetDefaultOrderBys(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Sets the default order by snippets.
            </summary>
            <param name="orderBys">The order by snippets.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetExtraCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sets the extra condition which will be used in every default query (but not apply to multi-query, hql and your own query).
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.BuildQueryOver(System.Boolean)">
            <summary>
            Builds the query over.
            </summary>
            <param name="withExtraCondition">if set to <c>true</c> [with extra condition].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.AppendOrderBys(NHibernate.IQueryOver{`0,`0},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Boolean)">
            <summary>
            Appends custom order bys, if there is no custom value use default order bys instead.
            </summary>
            <param name="query">The query.</param>
            <param name="orderBys">The custom order bys.</param>
            <param name="withDefaultOrderBys">if set to <c>true</c> [with default order bys].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IQueryOver{`0})">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IQuery)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.ICriteria)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IMultiCriteria)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IMultiQuery)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Exist(`1)">
            <summary>
            Determine whether the object is exists.
            </summary>
            <param name="key">The object key.</param>
            <returns>
              <c>true</c> if the object is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determine whether contains objects that match The condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
              <c>true</c> if objects that match The condition. is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Exist(NHibernate.Criterion.ICriterion)">
            <summary>
            Determine whether contains objects that match The condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
              <c>true</c> if objects that match The condition. is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCount">
            <summary>
            Gets objects total.
            </summary>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCount(NHibernate.Criterion.ICriterion)">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCountInt64">
            <summary>
            Counts objects total.
            </summary>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCountInt64(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCountInt64(NHibernate.Criterion.ICriterion)">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Find(`1)">
            <summary>
            Find object with the specified key.
            </summary>
            <param name="key">The object key.</param>
            <returns>If data exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find object.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            If data exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Find(NHibernate.Criterion.ICriterion)">
            <summary>
            Find object.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            If data exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <param name="orderBys">The order by snippets.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Add(`0)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add objects.
            </summary>
            <param name="objs">The objects.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Save(`0)">
            <summary>
            Add or update an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Remove(`1)">
            <summary>
            Remove an object with the specified key.
            </summary>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Remove(`0)">
            <summary>
            Remove an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Clear">
            <summary>
            Clear all objects.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ToUniqueList(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            To unique item list.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The list does not contains duplicate elements</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="hqls">The hql queries.</param>
            <returns>The query result list.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{NHibernate.ICriteria})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="criterias">The criterias.</param>
            <returns>The IMultiCriteria object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{NHibernate.IQuery})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="queries">The queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{NHibernate.IQueryOver{`0}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="queries">The queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="hqls">The hql queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,NHibernate.ICriteria}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="criterias">The criterias.</param>
            <returns>The IMultiCriteria object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,NHibernate.IQuery}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="queries">The queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.NormalizePageIndex(System.Int32)">
            <summary>
            Normalizes the page index parameter.
            </summary>
            <param name="pageIndex">The page index parameter.</param>
            <returns>The normalized page index parameter.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.NormalizePageSize(System.Int32)">
            <summary>
            Normalizes the page size parameter.
            </summary>
            <param name="pageSize">The page size parameter.</param>
            <returns>The normalized page size parameter.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQuery,NHibernate.IQuery,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="countQuery">The count query.</param>
            <param name="dataQuery">The query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            The query result list
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.ICriteria,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            The query result list
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQueryOver{`0},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="query">The query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            The query result list
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQuery,System.Int32,System.Int32)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="query">The data query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>The query result list</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.ICriteria,System.Int32,System.Int32)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="criteria">The data criteria.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>The query result list</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQueryOver{`0},System.Int32,System.Int32)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="query">The data query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>The query result list</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The min value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The min value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The max value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The max value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The sum value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The sum value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The average value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The average value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindFirst(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Remove object with the specified condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindByKeys(System.Collections.Generic.IEnumerable{`1},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects by keys.
            </summary>
            <param name="keys">The object keys.</param>
            <param name="orderBys">The order by snippets.</param>
            <returns>
            If data exists and keys not empty, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteNonQuery.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteScalar.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>The first column of the first result row.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteReader.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>System.Data.IDataReader instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteDataTable.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>System.Data.DataTable instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpCreateCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Create System.Data.IDbCommand instance for stored procedure.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>
            System.Data.IDbCommand instance.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Update(`0)">
            <summary>
            Updates an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindKeys(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all object keys.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>
            If data exists, return an array, otherwise return an empty array.
            </returns>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.Session">
            <summary>
            Gets the NHibernate session object.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.UseQueryCache">
            <summary>
            Gets or sets a value indicating whether use query cache.
            </summary>
            <value>
              <c>true</c> if use query cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.DefaultOrderBys">
            <summary>
            Gets the default order by snippets.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.ExtraCondition">
            <summary>
            Gets the extra condition which will be used in every default query (but not apply to multi-query, hql and your own query).
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.Item(`1)">
            <summary>
            Find the object with the specified key.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.Cache.Memcached.CacheClient">
            <summary>
            CacheClient
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.#ctor(Enyim.Caching.IMemcachedClient,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Cache.Memcached.CacheClient"/> class.
            </summary>
            <param name="memClient">The mem client.</param>
            <param name="regionName">Name of the region.</param>
            <param name="properties">The config properties.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Clear">
            <summary>
            Clear the Cache
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Destroy">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Get(System.Object)">
            <summary>
            Get the object from the Cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Lock(System.Object)">
            <summary>
            If this is a clustered cache, lock the item
            </summary>
            <param name="key">The Key of the Item in the Cache to lock.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.NextTimestamp">
            <summary>
            Generate a timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Put(System.Object,System.Object)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Remove(System.Object)">
            <summary>
            Remove an item from the Cache.
            </summary>
            <param name="key">The Key of the Item in the Cache to remove.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Unlock(System.Object)">
            <summary>
            If this is a clustered cache, unlock the item
            </summary>
            <param name="key">The Key of the Item in the Cache to unlock.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.BuildRealCacheKey(System.Object)">
            <summary>
            Builds the real cache key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.Cache.Memcached.CacheClient.RegionName">
            <summary>
            Gets the name of the cache region
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Timeout">
            <summary>
            Get a reasonable "lock timeout"
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.Cache.Memcached.CacheProvider">
            <summary>
            CacheProvider
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Configure the cache
            </summary>
            <param name="regionName">the name of the cache region</param>
            <param name="properties">configuration settings</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.NextTimestamp">
            <summary>
            generate a timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.Start(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Callback to perform any necessary initialization of the underlying cache implementation
            during ISessionFactory construction.
            </summary>
            <param name="properties">current configuration settings</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.Stop">
            <summary>
            Callback to perform any necessary cleanup of the underlying cache implementation
            during <see cref="M:NHibernate.ISessionFactory.Close" />.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.ContextualUnitOfWork">
            <summary>
            NHibernate unit of work class using context bound session.
            </summary>
        </member>
        <member name="T:Radial.Persist.IUnitOfWork">
            <summary>
            Unit of work interface.
            </summary>
        </member>
        <member name="T:Radial.Persist.IUnitOfWorkEssential">
            <summary>
            Represents basic methods of the unit of work.
            </summary>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.ResetIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Reset the transaction isolation level.
            </summary>
            <param name="level">The new isolation level.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterNew``1(``0)">
            <summary>
            Register object which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterNew``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterUpdate``1(``0)">
            <summary>
            Register object which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterSave``1(``0)">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterSave``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterDelete``1(``0)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterDelete``2(``1)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <typeparam name="TKey">The type of object key.</typeparam>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterClear``1">
            <summary>
            Register delete all objects.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
        </member>
        <member name="P:Radial.Persist.IUnitOfWorkEssential.UnderlyingContext">
            <summary>
            Gets the underlying data context object.
            </summary>
        </member>
        <member name="M:Radial.Persist.IUnitOfWork.Commit">
            <summary>
            Commit changes to data source.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.ContextualUnitOfWork"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.ResetIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Reset the transaction isolation level.
            </summary>
            <param name="level">The new isolation level.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.PrepareTransaction">
            <summary>
            Prepares the transaction.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterNew``1(``0)">
            <summary>
            Register object which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterNew``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterSave``1(``0)">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterSave``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterDelete``1(``0)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterDelete``2(``1)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <typeparam name="TKey">The type of object key.</typeparam>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterClear``1">
            <summary>
            Register delete all objects.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.Commit">
            <summary>
            Commit changes to data source.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterUpdate``1(``0)">
            <summary>
            Register object which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="P:Radial.Persist.Nhs.ContextualUnitOfWork.UnderlyingContext">
            <summary>
            Gets the underlying data context object.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.DefaultFactoryPoolInitializer">
            <summary>
            Default hibernate session factory pool initializer.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.IFactoryPoolInitializer">
            <summary>
            Initialize hibernate session factory pool.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.IFactoryPoolInitializer.Execute">
            <summary>
            Execute pool initialization.
            </summary>
            <returns>The session factory wrapper set.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.DefaultFactoryPoolInitializer.Execute">
            <summary>
            Execute pool initialization.
            </summary>
            <returns>
            The session factory wrapper set.
            </returns>
        </member>
        <member name="P:Radial.Persist.Nhs.DefaultFactoryPoolInitializer.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.HibernateEngine">
            <summary>
            Represent a basic NHibernate engine without partition and shard.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.HibernateEngine.SessionFactory">
             <summary>
            The NHibernate.ISessionFactory instance.
             </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Persist.Nhs.HibernateEngine"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.OpenSession">
            <summary>
            Create a database connection and open a ISession on it.
            </summary>
            <returns>ISession instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.OpenAndBindSession">
            <summary>
            Open and bind the specified session to the current context.
            </summary>
            <returns>ISession instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.BindSession(NHibernate.ISession)">
            <summary>
            Binds the specified session to the current context.
            </summary>
            <param name="session">The session instance .</param>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.UnbindSession">
            <summary>
            Unbinds and returns the current session.
            </summary>
            <returns>The session instance .</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.CloseAndUnbindSession">
            <summary>
            Close and unbind the specified session from the current context.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.HibernateEngine.CurrentSession">
            <summary>
            Gets the current session.
            </summary>
            <returns>The session instance .</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.ITableShardable">
            <summary>
            Indicate table can separate into shards .
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ITableShardable.GetTableMappings(System.String)">
            <summary>
            Gets the shard table mappings.
            </summary>
            <param name="storageAlias">The storage alias.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy">
            <summary>
            MySql naming strategy
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.ClassToTableName(System.String)">
            <summary>
            Return a table name for an entity class
            </summary>
            <param name="className">the fully-qualified class name</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.ColumnName(System.String)">
            <summary>
            Alter the column name given in the mapping document
            </summary>
            <param name="columnName">a column name</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.LogicalColumnName(System.String,System.String)">
            <summary>
            Return the logical column name used to refer to a column in the metadata
            (like index, unique constraints etc)
            A full bijection is required between logicalNames and physical ones
            logicalName have to be case insersitively unique for a given table
            </summary>
            <param name="columnName">given column name if any</param>
            <param name="propertyName">property name of this column</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.PropertyToColumnName(System.String)">
            <summary>
            Return a column name for a property path expression
            </summary>
            <param name="propertyName">a property path</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.PropertyToTableName(System.String,System.String)">
            <summary>
            Return a table name for a collection
            </summary>
            <param name="className">the fully-qualified name of the owning entity class</param>
            <param name="propertyName">a property path</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.TableName(System.String)">
            <summary>
            Alter the table name given in the mapping document
            </summary>
            <param name="tableName">a table name</param>
            <returns>a table name</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory">
            <summary>
            Naming strategy factory
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.NotFoundDataEngineGeneralConfigFileExceptionMessageFormat">
            <summary>
            The NotFoundDataEngineGeneralConfigFileExceptionMessageFormat.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.NotFoundDbDriverConfigExceptionMessageFormat">
            <summary>
            The NotFoundDbDriverConfigExceptionMessageFormat.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.GetStrategy(System.Type)">
            <summary>
            Gets the strategy.
            </summary>
            <param name="driverClassType">The driver class type.</param>
            <returns>INamingStrategy instance, if not found matched strategy return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.GetStrategy(System.String)">
            <summary>
            Gets the strategy.
            </summary>
            <param name="driverClassTypeString">The driver class type string.</param>
            <returns>INamingStrategy instance, if not found matched strategy return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.IsSupported(System.Type)">
            <summary>
            Determines whether the specified driver class type string is supported.
            </summary>
            <param name="driverClassType">The driver class type.</param>
            <returns>
              <c>true</c> if the specified driver class type string is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.IsSupported(System.String)">
            <summary>
            Determines whether the specified driver class type string is supported.
            </summary>
            <param name="driverClassTypeString">The driver class type string.</param>
            <returns>
              <c>true</c> if the specified driver class type string is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.GetSupportedStrategyFromConfiguration(System.String)">
            <summary>
            Gets the supported strategy, if not return null.
            </summary>
            <param name="configurationPath">The configuration path.</param>
            <returns>The INamingStrategy instance, if not found supported strategy return null.</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy">
            <summary>
            Sqlite naming strategy.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.ClassToTableName(System.String)">
            <summary>
            Return a table name for an entity class
            </summary>
            <param name="className">the fully-qualified class name</param>
            <returns>
            a table name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.ColumnName(System.String)">
            <summary>
            Alter the column name given in the mapping document
            </summary>
            <param name="columnName">a column name</param>
            <returns>
            a column name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.LogicalColumnName(System.String,System.String)">
            <summary>
            Return the logical column name used to refer to a column in the metadata
            (like index, unique constraints etc)
            A full bijection is required between logicalNames and physical ones
            logicalName have to be case insersitively unique for a given table
            </summary>
            <param name="columnName">given column name if any</param>
            <param name="propertyName">property name of this column</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.PropertyToColumnName(System.String)">
            <summary>
            Return a column name for a property path expression
            </summary>
            <param name="propertyName">a property path</param>
            <returns>
            a column name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.PropertyToTableName(System.String,System.String)">
            <summary>
            Return a table name for a collection
            </summary>
            <param name="className">the fully-qualified name of the owning entity class</param>
            <param name="propertyName">a property path</param>
            <returns>
            a table name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.TableName(System.String)">
            <summary>
            Alter the table name given in the mapping document
            </summary>
            <param name="tableName">a table name</param>
            <returns>
            a table name
            </returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy">
            <summary>
            SqlServer naming strategy
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.ClassToTableName(System.String)">
            <summary>
            Return a table name for an entity class
            </summary>
            <param name="className">the fully-qualified class name</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.ColumnName(System.String)">
            <summary>
            Alter the column name given in the mapping document
            </summary>
            <param name="columnName">a column name</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.LogicalColumnName(System.String,System.String)">
            <summary>
            Return the logical column name used to refer to a column in the metadata
            (like index, unique constraints etc)
            A full bijection is required between logicalNames and physical ones
            logicalName have to be case insersitively unique for a given table
            </summary>
            <param name="columnName">given column name if any</param>
            <param name="propertyName">property name of this column</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.PropertyToColumnName(System.String)">
            <summary>
            Return a column name for a property path expression
            </summary>
            <param name="propertyName">a property path</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.PropertyToTableName(System.String,System.String)">
            <summary>
            Return a table name for a collection
            </summary>
            <param name="className">the fully-qualified name of the owning entity class</param>
            <param name="propertyName">a property path</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.TableName(System.String)">
            <summary>
            Alter the table name given in the mapping document
            </summary>
            <param name="tableName">a table name</param>
            <returns>a table name</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NhUnitOfWork">
            <summary>
            NHibernate unit of work class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.NhUnitOfWork"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.NhUnitOfWork"/> class.
            </summary>
            <param name="alias">The storage alias (case insensitive, can be null or empty).</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.ResetIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Reset the transaction isolation level.
            </summary>
            <param name="level">The new isolation level.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.PrepareTransaction">
            <summary>
            Prepares the transaction.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterNew``1(``0)">
            <summary>
            Register object which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterNew``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterSave``1(``0)">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterSave``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterDelete``1(``0)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterDelete``2(``1)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <typeparam name="TKey">The type of object key.</typeparam>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterClear``1">
            <summary>
            Register delete all objects.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.Commit">
            <summary>
            Commit changes to data source.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterUpdate``1(``0)">
            <summary>
            Register object which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="P:Radial.Persist.Nhs.NhUnitOfWork.UnderlyingContext">
            <summary>
            Gets the underlying data context object.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.Order.SqlServerRandomOrder">
            <summary>
            SqlServerRandomOrder
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Order.SqlServerRandomOrder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Order.SqlServerRandomOrder"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Order.SqlServerRandomOrder.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Render the SQL fragment
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <returns></returns>
        </member>
        <member name="T:Radial.Persist.Nhs.Param.NhParam">
            <summary>
            IParam implementation using NHibernate. 
            </summary>
        </member>
        <member name="T:Radial.Param.IParam">
            <summary>
            IParam interface.
            </summary>
        </member>
        <member name="M:Radial.Param.IParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.IParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Param.IParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return its value, otherwise return string.Empty.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path matches, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>If path matches, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.IParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.IParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.EnableCache">
            <summary>
            The enable cache.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.CacheKey">
            <summary>
            The cache key.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.CacheMinutes">
            <summary>
            The cache minutes (0=do not remove cache).
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.StorageAlias">
            <summary>
            Storage alias.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Param.NhParam"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.ReadFromDatabase">
            <summary>
            Reads from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.WriteToDatabase">
            <summary>
            Writes to database.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.LoadRootElement">
            <summary>
            Loads the root element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.SaveRootElement(System.Xml.Linq.XElement)">
            <summary>
            Saves the root element.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.SetToCache(Radial.Persist.Nhs.Param.ParamItem)">
            <summary>
            Sets ParamItem to cache.
            </summary>
            <param name="item">The ParamItem item.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.RetrieveFromCache">
            <summary>
            Retrieves ParamItem from cache.
            </summary>
            <returns>The ParamItem item</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.BuildXName(System.String)">
            <summary>
            Builds the name with xmlns.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.LoadObject(System.Xml.Linq.XElement)">
            <summary>
            Loads the param object from XElement.
            </summary>
            <param name="e">The XElement.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the element.
            </summary>
            <param name="root">The root.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.RecursiveCreateParent(System.Xml.Linq.XElement,System.String)">
            <summary>
            Recursives the create parent.
            </summary>
            <param name="root">The root.</param>
            <param name="childPath">The child path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Create(System.String,System.String,System.String)">
            <summary>
            Create new param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
            <returns>
            If successful created, return param object.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Update(System.String,System.String,System.String)">
            <summary>
            Update param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The new description.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return the object, otherwise return null.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise return string.Empty.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Radial.Persist.Nhs.Param.ParamItem">
            <summary>
            Param Item
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.ParamItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Param.ParamItem"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.ParamItem.ToCacheString">
            <summary>
            To the cache string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.ParamItem.FromCacheString(System.String)">
            <summary>
            Froms the cache string.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.Param.ParamItem.XmlContent">
            <summary>
            Gets or sets the xml based content.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.Param.ParamItem.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.SessionFactoryPool">
            <summary>
            Hibernate session factory pool.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Persist.Nhs.SessionFactoryPool"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GeFactorytWrapper(System.String)">
            <summary>
            Gets the SessionFactoryWrapper object with the specified storage alias.
            </summary>
            <param name="storageAlias">The storage alias (case insensitive).</param>
            <returns>The SessionFactoryWrapper object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GetFactoryWrappers(System.String[])">
            <summary>
            Gets the SessionFactoryWrapper object with the specified storage aliases.
            </summary>
            <param name="storageAliases">The storage alias array (case insensitive).</param>
            <returns>The SessionFactoryWrapper object array.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GetFactoryInstance(System.String)">
            <summary>
            Gets the <see cref="T:NHibernate.ISessionFactory"/> instance with the specified storage alias.
            </summary>
            <param name="factoryAlias">The storage alias (case insensitive).</param>
            <returns>The NHibernate.ISessionFactory instance</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GetStorageAliases">
            <summary>
            Gets all storage aliases.
            </summary>
            <returns>
            The storage aliases array.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.OpenSession(System.String)">
            <summary>
            Open a new session using the specified storage alias.
            </summary>
            <param name="alias">The storage alias (case insensitive).</param>
            <returns>A new ISession instance.</returns>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryPool.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryPool.First">
            <summary>
            Gets the first NHibernate.ISessionFactory instance.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.SessionFactoryWrapper">
            <summary>
            A wrapper class of ISessionFactory instance.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.#ctor(System.String,NHibernate.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.SessionFactoryWrapper"/> class.
            </summary>
            <param name="alias">The storage alias (case insensitive).</param>
            <param name="factory">The factory instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.Equals(Radial.Persist.StorageAliasConfig)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryWrapper.Alias">
            <summary>
            Gets the storage alias.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryWrapper.Factory">
            <summary>
            Gets the factory instance.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.ShardTableMapping">
            <summary>
            Table shard mapping.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ShardTableMapping.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.ShardTableMapping.Equals(Radial.Persist.Nhs.ShardTableMapping)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.ShardTableMapping.ObjectType">
            <summary>
            Gets or sets the full type of the object.
            </summary>
            <value>
            The type of the object.
            </value>
        </member>
        <member name="P:Radial.Persist.Nhs.ShardTableMapping.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="T:Radial.Persist.Nhs.TimingIdGenerator">
            <summary>
            Identifier generator based on time.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.TimingIdGenerator.Generate(NHibernate.Engine.ISessionImplementor,System.Object)">
            <summary>
            Generate a new identifier
            </summary>
            <param name="session">The <see cref="T:NHibernate.Engine.ISessionImplementor" /> this id is being generated in.</param>
            <param name="obj">The entity for which the id is being generated.</param>
            <returns>
            The new identifier
            </returns>
        </member>
        <member name="T:Radial.Persist.StorageAliasConfig">
            <summary>
            Storage alias config
            </summary>
        </member>
        <member name="M:Radial.Persist.StorageAliasConfig.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Radial.Persist.StorageAliasConfig.Equals(Radial.Persist.StorageAliasConfig)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.StorageAliasConfig.Name">
            <summary>
            Gets the alias name.
            </summary>
        </member>
        <member name="P:Radial.Persist.StorageAliasConfig.Settings">
            <summary>
            Gets the alias settings.
            </summary>
        </member>
        <member name="T:Radial.Serialization.SerializeFormat">
            <summary>
            Serialize format
            </summary>
        </member>
        <member name="F:Radial.Serialization.SerializeFormat.Binary">
            <summary>
            Binary type.
            </summary>
        </member>
        <member name="F:Radial.Serialization.SerializeFormat.Xml">
            <summary>
            Xml type.
            </summary>
        </member>
        <member name="F:Radial.Serialization.SerializeFormat.Json">
            <summary>
            Json type.
            </summary>
        </member>
        <member name="T:Radial.Cache.CacheStatic">
            <summary>
            The entrance static class of cache.
            </summary>
        </member>
        <member name="M:Radial.Cache.CacheStatic.NormalizeKey(System.String)">
            <summary>
            Normalizes the cache key.
            </summary>
            <param name="key">The cache key.</param>
            <returns>Normalize cache key.</returns>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Set(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key.</param>
            <returns>If there has matched key, return the cached data, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Get``1(System.String,System.Func{System.Object,``0})">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The cache value type.</typeparam>
            <param name="key">The cache key.</param>
            <param name="converter">The object to T type converter.</param>
            <returns>
            If there has matched key, return the cached value, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Remove(System.String)">
            <summary>
            Remove cache data.
            </summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="P:Radial.Cache.CacheStatic.Instance">
            <summary>
            Gets the ICache instance.
            </summary>
        </member>
        <member name="T:Radial.Cache.EmptyCache">
            <summary>
            The default concret class with no cache implement
            </summary>
        </member>
        <member name="T:Radial.Cache.ICache">
            <summary>
            Cache interface.
            </summary>
        </member>
        <member name="M:Radial.Cache.ICache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key.</param>
            <returns>If there has matched key, return the cached value, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Cache.ICache.Set(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.ICache.Remove(System.String)">
            <summary>
            Remove cache data.
            </summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key.</param>
            <returns>
            If there has matched key, return the cached value, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Remove(System.String)">
            <summary>
            Remove cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
        </member>
        <member name="T:Radial.Cache.LocalCache">
            <summary>
            The local memory cache implement.
            </summary>
        </member>
        <member name="M:Radial.Cache.LocalCache.Remove(System.String)">
            <summary>
            Remove cache data.
            </summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:Radial.Cache.LocalCache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key.</param>
            <returns>
            If there has matched key, return the cached value, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Cache.LocalCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="T:Radial.Cache.MemCache">
            <summary>
            Memcached cache implement class.
            </summary>
        </member>
        <member name="M:Radial.Cache.MemCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Cache.MemCache"/> class.
            </summary>
        </member>
        <member name="M:Radial.Cache.MemCache.Serialize(System.Object)">
            <summary>
            Complex type serialization method.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Cache.MemCache.Deserialize(System.Byte[])">
            <summary>
            Complex type deserialization method.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Cache.MemCache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key.</param>
            <returns>
            If there has matched key, return the cached value, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Cache.MemCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.MemCache.Remove(System.String)">
            <summary>
            Remove cache data.
            </summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="T:Radial.Components">
            <summary>
            Components
            </summary>
        </member>
        <member name="P:Radial.Components.Container">
            <summary>
            Gets the container.
            </summary>
        </member>
        <member name="T:Radial.Cycler">
            <summary>
            Execute function cyclically.
            </summary>
        </member>
        <member name="M:Radial.Cycler.Execute(System.Func{System.Boolean},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Execute function cyclically .
            </summary>
            <param name="predicateFunc">The predicate function, return true to circulate this function.</param>
            <param name="waitMilliseconds">The loop wait milliseconds.</param>
            <param name="maxLoops">The max loop times before function return true or stop until function return true if set to null.</param>
        </member>
        <member name="M:Radial.Cycler.Execute(System.Func{System.Boolean},System.Int32,System.Nullable{System.Int32},Radial.Logger)">
            <summary>
            Execute function cyclically .
            </summary>
            <param name="predicateFunc">The predicate function, return true to circulate this function.</param>
            <param name="waitMilliseconds">The loop wait milliseconds.</param>
            <param name="maxLoops">The max loop times before function return true or stop until function return true if set to null.</param>
            <param name="logger">The user specified log instance, if not set value, will use Logger.Default as default.</param>
        </member>
        <member name="M:Radial.Cycler.ExecuteAsync(System.Func{System.Boolean},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Execute function asynchronous cyclically .
            </summary>
            <param name="predicateFunc">The predicate function, return true to circulate this function.</param>
            <param name="waitMilliseconds">The loop wait milliseconds.</param>
            <param name="maxLoops">The max loop times before function return true or stop until function return true if set to null.</param>
        </member>
        <member name="M:Radial.Cycler.ExecuteAsync(System.Func{System.Boolean},System.Int32,System.Nullable{System.Int32},Radial.Logger)">
            <summary>
            Execute function asynchronous cyclically .
            </summary>
            <param name="predicateFunc">The predicate function, return true to circulate this function.</param>
            <param name="waitMilliseconds">The loop wait milliseconds.</param>
            <param name="maxLoops">The max loop times before function return true or stop until function return true if set to null.</param>
            <param name="logger">The user specified log instance, if not set value, will use Logger.Default as default.</param>
        </member>
        <member name="T:Radial.Drawing.FontWarpFactor">
            <summary>
            Amount of random font warping to apply to rendered text
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.Extreme">
            <summary>
            Extreme
            </summary>
        </member>
        <member name="T:Radial.Drawing.BackgroundNoiseLevel">
            <summary>
            Amount of background noise to add to rendered image
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.Extreme">
            <summary>
            Extreme
            </summary>
        </member>
        <member name="T:Radial.Drawing.LineNoiseLevel">
            <summary>
            Amount of curved line noise to add to rendered image
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.Extreme">
            <summary>
            Extreme
            </summary>
        </member>
        <member name="T:Radial.Drawing.Captcha">
            <summary>
            CAPTCHA Image
            </summary>
            <seealso href="http://www.codinghorror.com">Original By Jeff Atwood</seealso>
        </member>
        <member name="F:Radial.Drawing.Captcha.RandomFontFamily">
            <summary>
            RandomFontFamily
            </summary>
        </member>
        <member name="F:Radial.Drawing.Captcha.RandomColor">
            <summary>
            RandomColor
            </summary>
        </member>
        <member name="M:Radial.Drawing.Captcha.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Drawing.Captcha"/> class.
            </summary>
        </member>
        <member name="M:Radial.Drawing.Captcha.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Drawing.Captcha"/> class.
            </summary>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Drawing.Captcha"/> class.
            </summary>
            <param name="text">The captcha text.</param>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.RenderImage">
            <summary>
            Forces a new Captcha image to be generated using current property value settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RenderImage(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Forces a new Captcha image to be generated using current property value settings.
            </summary>
            <param name="format">The image format.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RenderImageBytes(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Forces a new Captcha image to be generated using current property value settings.
            </summary>
            <param name="format">The image format.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GetRandomFontFamily">
            <summary>
            Returns a random font family from the font whitelist
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GenerateRandomText">
            <summary>
            generate random text for the CAPTCHA
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RandomPoint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a random point within the specified x and y ranges
            </summary>
            <param name="xmin">The xmin.</param>
            <param name="xmax">The xmax.</param>
            <param name="ymin">The ymin.</param>
            <param name="ymax">The ymax.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GetRandomColor">
            <summary>
            Randoms the color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RandomPoint(System.Drawing.Rectangle)">
            <summary>
            Returns a random point within the specified rectangle
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.TextPath(System.String,System.Drawing.Font,System.Drawing.Rectangle)">
            <summary>
            Returns a GraphicsPath containing the specified string and font
            </summary>
            <param name="s">The s.</param>
            <param name="f">The f.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GetFont">
            <summary>
            Returns the CAPTCHA font in an appropriate size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GenerateImagePrivate">
            <summary>
            Renders the CAPTCHA image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.WarpText(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle)">
            <summary>
            Warp the provided text GraphicsPath by a variable amount
            </summary>
            <param name="textPath">The text path.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.AddNoise(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Add a variable level of graphic noise to the image
            </summary>
            <param name="g">The graphics obj.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.AddLine(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Add variable level of curved lines to the image
            </summary>
            <param name="g">The graphics obj.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="P:Radial.Drawing.Captcha.TextChars">
            <summary>
            Gets or sets a string of available text characters for the generator to use.
            </summary>
            <value>The text chars.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.TextLength">
            <summary>
            Gets or sets the length of the text.
            </summary>
            <value>The length of the text.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.FontWarp">
            <summary>
            Gets and sets amount of random warping to apply to the <see cref="T:Radial.Drawing.Captcha"/> instance.
            </summary>
            <value>The font warp.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.BackgroundNoise">
            <summary>
            Gets and sets amount of background noise to apply to the <see cref="T:Radial.Drawing.Captcha"/> instance.
            </summary>
            <value>The background noise.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.LineNoise">
            <summary>
            Gets or sets amount of line noise to apply to the <see cref="T:Radial.Drawing.Captcha"/> instance.
            </summary>
            <value>The line noise.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.CanvasColor">
            <summary>
            Gets or sets the canvas color.
            </summary>
            <value>
            The canvas color.
            </value>
        </member>
        <member name="P:Radial.Drawing.Captcha.RenderedAt">
            <summary>
            Returns the date and time this image was last rendered
            </summary>
            <value>The rendered at.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.Text">
            <summary>
            Gets the randomly generated Captcha text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.Width">
            <summary>
            Width of Captcha image to generate, in pixels
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.Height">
            <summary>
            Height of Captcha image to generate, in pixels
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:Radial.Checker">
            <summary>
            Tools for check whether a condition is valid.
            </summary>
        </member>
        <member name="M:Radial.Checker.Requires(System.Boolean,System.String,System.Object[])">
            <summary>
            Check whether the condition is true, otherwise throw an Exception.
            </summary>
            <param name="condition">The condition.</param>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="M:Radial.Checker.Parameter(System.Boolean,System.String,System.Object[])">
            <summary>
            Check whether the condition is true, otherwise throw an ArgumentException.
            </summary>
            <param name="condition">The condition.</param>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="M:Radial.Checker.Parameter(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Check whether the condition is true, otherwise throw an ArgumentException.
            </summary>
            <param name="condition">The condition.</param>
            <param name="paramName">The name of the parameter.</param>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="T:Radial.Drawing.ImageKits">
            <summary>
            Toolkits class for image.
            </summary>
        </member>
        <member name="M:Radial.Drawing.ImageKits.Crop(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crop the original image.
            </summary>
            <param name="original">The original image.</param>
            <param name="x">The x-coordinate of the upper-left corner of the image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the image.</param>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image.</param>
            <returns>
            The cropped image .
            </returns>
        </member>
        <member name="M:Radial.Drawing.ImageKits.Thumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Generates the thumbnail from the original image.
            </summary>
            <param name="original">The original image.</param>
            <param name="width">The width, in pixels, of the requested thumbnail image.</param>
            <param name="height">The height, in pixels, of the requested thumbnail image.</param>
            <returns>
            An Image that represents the thumbnail.
            </returns>
        </member>
        <member name="T:Radial.EnumDescriptionAttribute">
            <summary>
            Used to describe the enumeration item.
            </summary>
        </member>
        <member name="M:Radial.EnumDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.EnumDescriptionAttribute"/> class.
            </summary>
            <param name="text">The item description text.</param>
        </member>
        <member name="P:Radial.EnumDescriptionAttribute.Text">
            <summary>
            Gets the item description.
            </summary>
        </member>
        <member name="T:Radial.ExcelTools">
            <summary>
            Excel tools
            </summary>
        </member>
        <member name="M:Radial.ExcelTools.ExportToHttp(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String,System.Boolean)">
            <summary>
            Exports to HTTP stream.
            </summary>
            <param name="dataTables">The export data tables.</param>
            <param name="downloadFileName">The download file name, use random name if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToHttp(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String,System.Boolean,System.Action{OfficeOpenXml.ExcelWorksheet})">
            <summary>
            Exports to HTTP stream.
            </summary>
            <param name="dataTables">The export data tables.</param>
            <param name="downloadFileName">The download file name, use random name if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
            <param name="customHandler">The custom handler.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToHttp(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Exports to HTTP stream.
            </summary>
            <param name="dataTable">The export data table.</param>
            <param name="downloadFileName">The download file name, use random name if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToHttp(System.Data.DataTable,System.String,System.Boolean,System.Action{OfficeOpenXml.ExcelWorksheet})">
            <summary>
            Exports to HTTP stream.
            </summary>
            <param name="dataTable">The export data table.</param>
            <param name="downloadFileName">The download file name, use random name if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
            <param name="customHandler">The custom handler.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToHttp(System.Data.DataSet,System.String,System.Boolean,System.Action{OfficeOpenXml.ExcelWorksheet})">
            <summary>
            Exports to HTTP stream.
            </summary>
            <param name="dataSet">The export data set.</param>
            <param name="downloadFileName">The download file name, use random name if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
            <param name="customHandler">The custom handler.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToHttp(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Exports to HTTP stream.
            </summary>
            <param name="dataSet">The export data set.</param>
            <param name="downloadFileName">The download file name, use random name if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToFile(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String,System.Boolean)">
            <summary>
            Exports to file.
            </summary>
            <param name="dataTables">The export data tables.</param>
            <param name="excelFilePath">The excel file path, use random path if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> [column header].</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToFile(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String,System.Boolean,System.Action{OfficeOpenXml.ExcelWorksheet})">
            <summary>
            Exports to file.
            </summary>
            <param name="dataTables">The export data tables.</param>
            <param name="excelFilePath">The excel file path, use random path if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> [column header].</param>
            <param name="customHandler">The custom handler.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToFile(System.Data.DataTable,System.String,System.Boolean,System.Action{OfficeOpenXml.ExcelWorksheet})">
            <summary>
            Exports to file.
            </summary>
            <param name="dataTable">The export data table.</param>
            <param name="excelFilePath">The excel file path, use random path if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> [column header].</param>
            <param name="customHandler">The custom handler.</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToFile(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Exports to file.
            </summary>
            <param name="dataTable">The export data table.</param>
            <param name="excelFilePath">The excel file path, use random path if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> [column header].</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToFile(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Exports to file.
            </summary>
            <param name="dataSet">The export data set.</param>
            <param name="excelFilePath">The excel file path, use random path if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> [column header].</param>
        </member>
        <member name="M:Radial.ExcelTools.ExportToFile(System.Data.DataSet,System.String,System.Boolean,System.Action{OfficeOpenXml.ExcelWorksheet})">
            <summary>
            Exports to file.
            </summary>
            <param name="dataSet">The export data set.</param>
            <param name="excelFilePath">The excel file path, use random path if set to null.</param>
            <param name="columnHeader">if set to <c>true</c> [column header].</param>
            <param name="customHandler">The custom handler.</param>
        </member>
        <member name="M:Radial.ExcelTools.FillWorkbook(OfficeOpenXml.ExcelPackage,System.Data.DataTable,System.Int32,System.Boolean,System.Action{OfficeOpenXml.ExcelWorksheet})">
            <summary>
            Fills the workbook.
            </summary>
            <param name="pck">The PCK.</param>
            <param name="table">The table.</param>
            <param name="sheetIndex">Index of the sheet (zero-base).</param>
            <param name="columnHeader">if set to <c>true</c> [column header].</param>
            <param name="customHandler">The custom handler.</param>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataTable(System.String,System.String,System.Boolean)">
            <summary>
            Imports to data table.
            </summary>
            <param name="excelFilePath">The excel file path.</param>
            <param name="sheetName">Name of the sheet.</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataTable(System.String,System.Int32,System.Boolean)">
            <summary>
            Imports to data table.
            </summary>
            <param name="excelFilePath">The excel file path.</param>
            <param name="sheetIndex">Index of the sheet (zero-base).</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataTable(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Imports to data table.
            </summary>
            <param name="excelStream">The excel stream.</param>
            <param name="sheetName">Name of the sheet.</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataTable(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Imports to data table.
            </summary>
            <param name="excelStream">The excel stream.</param>
            <param name="sheetIndex">Index of the sheet (zero-base).</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataTables(System.String,System.Boolean)">
            <summary>
            Imports to data tables.
            </summary>
            <param name="excelFilePath">The excel file path.</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataTables(System.IO.Stream,System.Boolean)">
            <summary>
            Imports to data tables.
            </summary>
            <param name="excelStream">The excel stream.</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataSet(System.String,System.Boolean)">
            <summary>
            Imports to data set.
            </summary>
            <param name="excelFilePath">The excel file path.</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.ImportToDataSet(System.IO.Stream,System.Boolean)">
            <summary>
            Imports to data set.
            </summary>
            <param name="excelStream">The excel stream.</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.ExcelTools.CreateDataTable(OfficeOpenXml.ExcelWorksheet,System.Boolean)">
            <summary>
            Creates the data table.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="firstRowHeader">if set to <c>true</c> [first row header].</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Extensions.CollectionExtensions">
            <summary>
            Collection extensions
            </summary>
        </member>
        <member name="M:Radial.Extensions.CollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes specified elements from collection by using a specified predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:Radial.Extensions.CollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds objects to the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="objs">The objs.</param>
        </member>
        <member name="T:Radial.Extensions.EnumerableExtensions">
            <summary>
            <![CDATA[
            Provides a set of static (Shared in Visual Basic) methods for querying objects that implement System.Collections.Generic.IEnumerable<T>
            ]]>
            </summary>
        </member>
        <member name="M:Radial.Extensions.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
        </member>
        <member name="T:Radial.Extensions.IOExtensions">
            <summary>
            IO extensions
            </summary>
        </member>
        <member name="M:Radial.Extensions.IOExtensions.ReadBytes(System.IO.Stream)">
            <summary>
            Read all bytes.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.FileWatcher">
            <summary>
            Monitor file, and raise event while it changes. 
            </summary>
        </member>
        <member name="M:Radial.FileWatcher.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.FileWatcher"/> class.
            </summary>
        </member>
        <member name="M:Radial.FileWatcher.CreateMonitor(System.String,Radial.FileWatcher.ReloadHandler)">
            <summary>
            Creates the monitor.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="reloadProcess">The reload process.</param>
        </member>
        <member name="M:Radial.FileWatcher.watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Manipulate file change event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.FileSystemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.FileWatcher.TimerCallback(System.Object)">
            <summary>
            Timer callback.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:Radial.FileWatcher.ReloadHandler">
            <summary>
            Reload file delegate.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="T:Radial.Boot.IBootTask">
            <summary>
            Boot task interface.
            </summary>
        </member>
        <member name="M:Radial.Boot.IBootTask.Initialize">
            <summary>
            System initialize process.
            </summary>
        </member>
        <member name="M:Radial.Boot.IBootTask.Start">
            <summary>
            Start system.
            </summary>
        </member>
        <member name="M:Radial.Boot.IBootTask.Stop">
            <summary>
            Stop system.
            </summary>
        </member>
        <member name="T:Radial.Net.ContentTypes">
            <summary>
            Content types.
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.PlainText">
            <summary>
            Plain Text Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Html">
            <summary>
            Html Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Xml">
            <summary>
            Xml Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Json">
            <summary>
            Json Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Excel">
            <summary>
            Excel Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.BinaryStream">
            <summary>
            Binary Stream Content Type
            </summary>
        </member>
        <member name="T:Radial.Persist.IStoragePolicy">
            <summary>
            Storage policy.
            </summary>
        </member>
        <member name="M:Radial.Persist.IStoragePolicy.GetObjectAlias(System.Type,System.Object)">
            <summary>
            Gets storage alias according to the specified object key.
            </summary>
            <param name="type">Type of the object.</param>
            <param name="key">The object key according to.</param>
            <returns>
            The storage alias.
            </returns>
        </member>
        <member name="M:Radial.Persist.IStoragePolicy.GetTypeAliases(System.Type)">
            <summary>
            Gets storage aliases supported by the specified object type.
            </summary>
            <param name="type">Type of the object.</param>
            <returns>
            The storage alias array.
            </returns>
        </member>
        <member name="T:Radial.Persist.OrderBySnippet`1">
            <summary>
            The order by snippet
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Radial.Persist.OrderBySnippet`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.OrderBySnippet`1"/> class.
            </summary>
            <param name="property">The sort property.</param>
            <param name="isAscending">if set to <c>true</c> [the property will sort in ascending].</param>
        </member>
        <member name="P:Radial.Persist.OrderBySnippet`1.Property">
            <summary>
            Gets the sort property.
            </summary>
        </member>
        <member name="P:Radial.Persist.OrderBySnippet`1.IsAscending">
            <summary>
            Gets a value indicating whether the property will sort in ascending.
            </summary>
            <value>
            	<c>true</c> if the property will sort in ascending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Persist.StorageRouter">
            <summary>
            Storage router.
            </summary>
        </member>
        <member name="M:Radial.Persist.StorageRouter.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Persist.StorageRouter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.StorageRouter.BuildXName(System.String)">
            <summary>
            Builds the name with xmlns.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStorageAlias``1(System.Object)">
            <summary>
            Gets storage alias according to the specified object key.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="objectKey">The object key.</param>
            <returns>
            The storage alias.
            </returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStorageAlias(System.Type,System.Object)">
            <summary>
            Gets storage alias according to the specified object key.
            </summary>
            <param name="type">Type of the object.</param>
            <param name="key">The object key according to.</param>
            <returns>
            The storage alias.
            </returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetTypeAliases``1">
            <summary>
            Gets storage aliases supported by the specified object type.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <returns>
            The storage alias array.
            </returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetTypeAliases(System.Type)">
            <summary>
            Gets storage aliases supported by the specified object type.
            </summary>
            <param name="type">Type of the object.</param>
            <returns>
            The storage alias array.
            </returns>
        </member>
        <member name="P:Radial.Persist.StorageRouter.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="P:Radial.Persist.StorageRouter.AliasConfigSet">
            <summary>
            Gets the storage alias config set.
            </summary>
            <value>
            The storage alias config set.
            </value>
        </member>
        <member name="T:Radial.PerWebRequestLifetimeManager">
            <summary>
            PerWebRequestLifetimeManager
            </summary>
        </member>
        <member name="F:Radial.PerWebRequestLifetimeManager.ItemKey">
            <summary>
            The item key
            </summary>
        </member>
        <member name="M:Radial.PerWebRequestLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>
            the object desired, or null if no such object is currently stored.
            </returns>
        </member>
        <member name="M:Radial.PerWebRequestLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Radial.PerWebRequestLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="T:Radial.PlainTextConfig">
            <summary>
            Plain text configuration.
            </summary>
        </member>
        <member name="M:Radial.PlainTextConfig.#ctor(System.String[])">
            <summary>
            Prevents a default instance of the <see cref="T:Radial.PlainTextConfig"/> class from being created.
            </summary>
            <param name="textLines">The text lines.</param>
        </member>
        <member name="M:Radial.PlainTextConfig.LoadFromFile(System.String)">
            <summary>
            Loads configuration from file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.PlainTextConfig.LoadFromText(System.String)">
            <summary>
            Loads configuration from text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.PlainTextConfig.Contains(System.String)">
            <summary>
            Determines whether contains the specified property name.
            </summary>
            <param name="name">The property name.</param>
            <returns>
              <c>true</c> if contains the specified property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.PlainTextConfig.GetValue(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="name">The property name.</param>
            <returns>
            If property name exist, return its value, otherwise return null.
            </returns>
        </member>
        <member name="P:Radial.PlainTextConfig.Item(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="name">The property name.</param>
            <returns>
            If property name exist, return its value, otherwise return null.
            </returns>
        </member>
        <member name="T:Radial.RangeValue`1">
            <summary>
            Represents a range of value.
            </summary>
        </member>
        <member name="M:Radial.RangeValue`1.#ctor(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.RangeValue`1"/> class.
            </summary>
            <param name="min">The range minimum value.</param>
            <param name="max">The range maximum value.</param>
        </member>
        <member name="P:Radial.RangeValue`1.Min">
            <summary>
            Gets or sets the range minimum value.
            </summary>
        </member>
        <member name="P:Radial.RangeValue`1.Max">
            <summary>
            Gets or sets the range maximum value.
            </summary>
        </member>
        <member name="T:Radial.KnownFaultException">
            <summary>
            Known fault exception.
            </summary>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Radial.KnownFaultException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="T:Radial.Logger">
            <summary>
            Log class.
            </summary>
        </member>
        <member name="F:Radial.Logger.S_IsStart">
            <summary>
            whether logger is started
            </summary>
        </member>
        <member name="M:Radial.Logger.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Radial.Logger"/> class from being created.
            </summary>
        </member>
        <member name="M:Radial.Logger.#ctor(System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:Radial.Logger"/> class from being created.
            </summary>
            <param name="logName">Name of the logger.</param>
        </member>
        <member name="M:Radial.Logger.Start">
            <summary>
            Starts the log component.
            </summary>
        </member>
        <member name="M:Radial.Logger.GetInstance(System.String)">
            <summary>
            Gets the specified log instance.
            </summary>
            <param name="logName">The log name.</param>
            <returns>log instance.</returns>
        </member>
        <member name="M:Radial.Logger.GetInstance``1">
            <summary>
            Gets the specified log instance.
            </summary>
            <typeparam name="T">the type.</typeparam>
            <returns>log instance.</returns>
        </member>
        <member name="M:Radial.Logger.Debug(System.String,System.Object[])">
            <summary>
            Logs a message string with the Debug level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Debug(System.Exception)">
            <summary>
            Logs a message string with the Debug level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Debug level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Info(System.String,System.Object[])">
            <summary>
            Logs a message string with the Info level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Info(System.Exception)">
            <summary>
            Logs a message string with the Info level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Info level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Warn(System.String,System.Object[])">
            <summary>
            Logs a message string with the Warn level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Warn(System.Exception)">
            <summary>
            Logs a message string with the Warn level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Warn level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Error(System.String,System.Object[])">
            <summary>
            Logs a message string with the Error level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Error(System.Exception)">
            <summary>
            Logs a message string with the Error level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Error level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Logs a message string with the Fatal level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Fatal(System.Exception)">
            <summary>
            Logs a message string with the Fatal level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Fatal level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="P:Radial.Logger.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="P:Radial.Logger.Default">
            <summary>
            Gets the default log instance.
            </summary>
        </member>
        <member name="T:Radial.Param.AppParam">
            <summary>
            The application parameter and configuration static class.
            </summary>
        </member>
        <member name="M:Radial.Param.AppParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return its value, otherwise return string.Empty.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.Save(System.String,System.Object)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.AppParam.Save(System.String,System.String,System.Object)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.AppParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueBoolean(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueBoolean(System.String,System.Boolean)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDecimal(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDecimal(System.String,System.Decimal)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDouble(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDouble(System.String,System.Double)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueFloat(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueFloat(System.String,System.Single)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt32(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt32(System.String,System.Int32)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt64(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt64(System.String,System.Int64)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueSingle(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueSingle(System.String,System.Single)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetObjectString(System.Object)">
            <summary>
            Gets the object string.
            </summary>
            <param name="obj">The obj.</param>
            <returns>If object is null return string.Empty, otherwise return the string value of object.</returns>
        </member>
        <member name="P:Radial.Param.AppParam.Instance">
            <summary>
            Get the IParam instance
            </summary>
        </member>
        <member name="T:Radial.Param.ConfigurationParam">
            <summary>
            ConfigurationManager param class.
            </summary>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.NormalizeAppSettings">
            <summary>
            Normalizes the app settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            /// <returns>If path exists, return its value, otherwise return string.Empty.</returns>
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Create(System.String,System.String,System.String)">
            <summary>
            Create new param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Update(System.String,System.String,System.String)">
            <summary>
            Update param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The new description.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Radial.Param.ParamObject">
            <summary>
            Repersents param data contract.
            </summary>
        </member>
        <member name="F:Radial.Param.ParamObject.PathSeparator">
            <summary>
            The path separator.
            </summary>
        </member>
        <member name="F:Radial.Param.ParamObject.PathRegexPattern">
            <summary>
            The path regex pattern
            </summary>
        </member>
        <member name="F:Radial.Param.ParamObject.XmlNs">
            <summary>
            The Xml namespace.
            </summary>
        </member>
        <member name="M:Radial.Param.ParamObject.IsPathValid(System.String)">
            <summary>
            Determine whether the specified path is valid.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.ParamObject.NormalizePath(System.String)">
            <summary>
            Normalize the path.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The path after process.
            </returns>
        </member>
        <member name="M:Radial.Param.ParamObject.GetParentPath(System.String)">
            <summary>
            Get the parent path.
            </summary>
            <param name="path">The path.</param>
            <returns>Returns parent path if exists, otherwise return String.Empty.</returns>
        </member>
        <member name="M:Radial.Param.ParamObject.GetParamName(System.String)">
            <summary>
            Gets the name of the param.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.ParamObject.BuildPath(System.String[])">
            <summary>
            Build param path depends on path levels.
            </summary>
            <param name="levels">The path levels.</param>
            <returns>A param path.</returns>
        </member>
        <member name="P:Radial.Param.ParamObject.Path">
            <summary>
            Gets or sets param path.
            </summary>
        </member>
        <member name="P:Radial.Param.ParamObject.Description">
            <summary>
            Gets or sets param description.
            </summary>
        </member>
        <member name="P:Radial.Param.ParamObject.Value">
            <summary>
            Gets or sets param value.
            </summary>
        </member>
        <member name="P:Radial.Param.ParamObject.ContainsNext">
            <summary>
            Gets or sets a value indicating whether contains next level(descendant) param objects.
            </summary>
            <value>
              <c>true</c> if contains next level(descendant) param objects; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Param.XmlParam">
            <summary>
            Xml param class.
            </summary>
        </member>
        <member name="M:Radial.Param.XmlParam.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Param.XmlParam"/> class.
            </summary>
        </member>
        <member name="M:Radial.Param.XmlParam.Initial(System.String)">
            <summary>
            Initials the specified config file path.
            </summary>
            <param name="configFilePath">The config file path.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.BuildXName(System.String)">
            <summary>
            Builds the name with xmlns.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.LoadObject(System.Xml.Linq.XElement)">
            <summary>
            Loads the param object from XElement.
            </summary>
            <param name="e">The XElement.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.GetElement(System.String)">
            <summary>
            Gets the element.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.RecursiveCreateParent(System.String)">
            <summary>
            Recursives the create parent.
            </summary>
            <param name="childPath">The child path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Create(System.String,System.String,System.String)">
            <summary>
            Create new param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Update(System.String,System.String,System.String)">
            <summary>
            Update param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The new description.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise return string.Empty.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="P:Radial.Param.XmlParam.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="P:Radial.Param.XmlParam.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:Radial.Pinyin">
            <summary>
            Pinyin tool for Chinese characters.
            </summary>
        </member>
        <member name="M:Radial.Pinyin.ConvertToPinyin(System.String)">
            <summary>
            Convert characters to Pinyin.
            </summary>
            <param name="characters">The input characters.</param>
            <returns>
            Pinyin string.
            </returns>
        </member>
        <member name="M:Radial.Pinyin.ConvertToPinyin(System.String,System.String)">
            <summary>
            Convert characters to Pinyin.
            </summary>
            <param name="characters">The input characters.</param>
            <param name="separator">The Pinyin separator.</param>
            <returns>
            Pinyin string.
            </returns>
        </member>
        <member name="T:Radial.RandomCode">
            <summary>
            Random code class.
            </summary>
        </member>
        <member name="M:Radial.RandomCode.Create(System.Int32)">
            <summary>
            Create random string.
            </summary>
            <param name="length">The length of random code.</param>
            <returns>New random string.</returns>
        </member>
        <member name="P:Radial.RandomCode.NewInstance">
            <summary>
            Initializes a new instance of the System.Random class.
            </summary>
        </member>
        <member name="T:Radial.Security.CryptoProvider">
            <summary>
            Crypto provider
            </summary>
        </member>
        <member name="M:Radial.Security.CryptoProvider.SHA1Encrypt(System.String)">
            <summary>
            SHA1 encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.SHA1Encrypt(System.Byte[])">
            <summary>
            SHA1 encrypt.
            </summary>
            <param name="clearTextBytes">The cleartext.</param>
            <returns>The ciphertext in binary format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.MD5Encrypt(System.String)">
            <summary>
            MD5 encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.MD5Encrypt(System.Byte[])">
            <summary>
            MD5 encrypt.
            </summary>
            <param name="clearTextBytes">The cleartext.</param>
            <returns>The ciphertext in binary format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESEncrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESEncrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES encrypt.
            </summary>
            <param name="clearBytes">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESDecrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES decrypt.
            </summary>
            <param name="encryptedText">The ciphertext in Base64 string format.</param>
            <param name="key">The encryption key.</param>
            <returns>The cleartext.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESDecrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES decrypt.
            </summary>
            <param name="encryptedBytes">The ciphertext in binary format.</param>
            <param name="key">The encryption key.</param>
            <returns>The cleartext.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelEncrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelEncrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael encrypt.
            </summary>
            <param name="clearBytes">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelDecrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael decrypt.
            </summary>
            <param name="encryptedText">The ciphertext in Base64 string format</param>
            <param name="key">The encryption key.</param>
            <returns>
            The cleartext.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelDecrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael decrypt.
            </summary>
            <param name="encryptedBytes">The ciphertext in binary format.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The cleartext in binary format.
            </returns>
        </member>
        <member name="T:Radial.Security.X509CertificateProvider">
            <summary>
             X.509 certificate provider class.
            </summary>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="certFilePath">The certificate file path.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="certFilePath">The certificate file path.</param>
            <param name="password">The certificate password.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="rawData">The raw data.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
            <summary>
            Exports the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Boolean)">
            <summary>
            Exports the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="usePassword">if set to <c>true</c> [use password].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.Verify">
            <summary>
            Performs a X.509 chain validation using basic validation policy.
            </summary>
            <returns>true if the validation succeeds; false if the validation fails.</returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.String)">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.String,System.Boolean)">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.Byte[])">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="rgb">The RGB.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.Byte[],System.Boolean)">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.String)">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.String,System.Boolean)">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.Byte[])">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="rgb">The RGB.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.Byte[],System.Boolean)">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePrivateKey(System.String)">
            <summary>
            Encrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePrivateKey(System.String,System.Boolean)">
            <summary>
            Encrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePrivateKey(System.Byte[],System.Boolean)">
            <summary>
            Encrypts the use private key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePrivateKey(System.String)">
            <summary>
            Decrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePrivateKey(System.String,System.Boolean)">
            <summary>
            Decrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePrivateKey(System.Byte[],System.Boolean)">
            <summary>
            Decrypts the use private key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePublicKey(System.String)">
            <summary>
            Creates the signature use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePublicKey(System.Byte[])">
            <summary>
            Creates the signature use public key.
            </summary>
            <param name="msgBytes">The MSG bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePrivateKey(System.String)">
            <summary>
            Creates the signature use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePrivateKey(System.Byte[])">
            <summary>
            Creates the signature use private key.
            </summary>
            <param name="msgBytes">The MSG bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePublicKey(System.String,System.String)">
            <summary>
            Verifies the signature use public key.
            </summary>
            <param name="dataStr">The data STR.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePublicKey(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature use public key.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePrivateKey(System.String,System.String)">
            <summary>
            Verifies the signature use private key.
            </summary>
            <param name="dataStr">The data STR.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePrivateKey(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature use private key.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Serialization.BinarySerializer">
            <summary>
            Binary serializer.
            </summary>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serializes object to binary array.
            </summary>
            <param name="obj">The obj instance.</param>
            <returns>The binary array.</returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Serialize``1(``0)">
            <summary>
            Serializes object to binary array.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The obj instance.</param>
            <returns>The binary array.</returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes binary array to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="binary">The binary array.</param>
            <returns>
            If the binary array is not null return the object, otherwise return type default value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes binary array to object.
            </summary>
            <param name="binary">The binary array.</param>
            <returns>
            If the binary array is not null return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.TryDeserialize``1(System.Byte[],``0@)">
            <summary>
            Deserializes binary array to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="binary">The binary array.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.TryDeserialize(System.Byte[],System.Object@)">
            <summary>
            Deserializes binary array to object.
            </summary>
            <param name="binary">The binary array.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="T:Radial.Serialization.Converters.BooleanJsonConverter">
            <summary>
            Converter boolean value to 0 or 1
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.BooleanJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.BooleanJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.BooleanJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.Converters.DateJsonConverter">
            <summary>
            Date json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Serialization.Converters.DateJsonConverter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.Converters.DateTimeJsonConverter">
            <summary>
            DateTime json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Serialization.Converters.DateTimeJsonConverter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter">
            <summary>
            DateTime with milliseconds json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.JsonSerializer">
            <summary>
            Json serializer.
            </summary>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Serialize``1(``0)">
            <summary>
            Serialize to json string.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="o">The object.</param>
            <returns>
            Json string.
            </returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize to json string.
            </summary>
            <param name="o">The object.</param>
            <returns>Json string.</returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize from json string.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="json">The json string.</param>
            <returns>
            Object instance.
            </returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Deserialize(System.String)">
            <summary>
            Deserialize from json string.
            </summary>
            <param name="json">The json string.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.TryDeserialize``1(System.String,``0@)">
            <summary>
            Deserialize from json string.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="json">The json string.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.TryDeserialize(System.String,System.Object@)">
            <summary>
            Deserialize from json string.
            </summary>
            <param name="json">The json string.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="T:Radial.Serialization.Converters.UnixTimeJsonConverter">
            <summary>
            DateTime to Unix TimeStamp json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.UnixTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.UnixTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.UnixTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.XmlSerializer">
            <summary>
            Xml serializer.
            </summary>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes object to xml.
            </summary>
            <param name="obj">The obj instance.</param>
            <param name="objType">The type of the object.</param>
            <returns>The xml string.</returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Serialize``1(``0)">
            <summary>
            Serializes object to xml.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The obj instance.</param>
            <returns>The xml string.</returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes xml to object.
            </summary>
            <param name="xml">The xml.</param>
            <param name="objType">The type of the object.</param>
            <returns>
            If the xml is not null or empty return object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes xml to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="xml">The xml.</param>
            <returns>
            If the xml is not null or empty return object, otherwise return type default value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.TryDeserialize(System.String,System.Type,System.Object@)">
            <summary>
            Deserializes xml to object.
            </summary>
            <param name="xml">The xml.</param>
            <param name="objType">The type of the object.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.TryDeserialize``1(System.String,``0@)">
            <summary>
            Deserializes xml to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="xml">The xml.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="T:Radial.Net.SmtpMail">
            <summary>
            Smtp mail class
            </summary>
        </member>
        <member name="M:Radial.Net.SmtpMail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.SmtpMail"/> class.
            </summary>
            <param name="host">A System.String that contains the name or IP address of the host used for SMTP transactions.</param>
        </member>
        <member name="M:Radial.Net.SmtpMail.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.SmtpMail"/> class.
            </summary>
            <param name="host">A System.String that contains the name or IP address of the host used for SMTP transactions.</param>
            <param name="port">An System.Int32 greater than zero that contains the port to be used on host.</param>
        </member>
        <member name="M:Radial.Net.SmtpMail.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.SmtpMail"/> class.
            </summary>
            <param name="host">A System.String that contains the name or IP address of the host used for SMTP transactions.</param>
            <param name="port">An System.Int32 greater than zero that contains the port to be used on host.</param>
            <param name="enableSsl">if set to <c>true</c> [enable SSL].</param>
        </member>
        <member name="M:Radial.Net.SmtpMail.FromConfiguration">
            <summary>
            Create SmtpMail instance from the configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.BuildToAddressString(System.Net.Mail.MailAddressCollection)">
            <summary>
            Builds to address string.
            </summary>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.String,System.String,System.Net.Mail.MailMessage)">
            <summary>
            Sends mail message.
            </summary>
            <param name="smtpAccountName">Name of the SMTP account.</param>
            <param name="smtpAccountPassword">The SMTP account password.</param>
            <param name="message">The mail message.</param>
            <returns>If mail send ok return true, otherwise false</returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.String,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Net.Mail.MailMessage)">
            <summary>
            Sends mail message.
            </summary>
            <param name="smtpAccountName">Name of the SMTP account.</param>
            <param name="smtpAccountPassword">The SMTP account password.</param>
            <param name="clientCertificates">The client certificates.</param>
            <param name="message">The mail message.</param>
            <returns>If mail send ok return true, otherwise false</returns>
        </member>
        <member name="P:Radial.Net.SmtpMail.ConfigurationSection">
            <summary>
            Gets the smtp section in the configuration file.
            </summary>
        </member>
        <member name="P:Radial.Net.SmtpMail.ConfigurationAccountName">
            <summary>
            Gets the smtp account name from the configuration file.
            </summary>
        </member>
        <member name="P:Radial.Net.SmtpMail.ConfigurationAccountPassword">
            <summary>
            Gets the smtp account password from the configuration file.
            </summary>
        </member>
        <member name="P:Radial.Net.SmtpMail.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:Radial.StaticVariables">
            <summary>
            Static Variables of the system.
            </summary>
        </member>
        <member name="F:Radial.StaticVariables.BaseDirectory">
            <summary>
            Application base directory.
            </summary>
        </member>
        <member name="F:Radial.StaticVariables.ConfigDirectory">
            <summary>
            Application configuration directory.
            </summary>
        </member>
        <member name="F:Radial.StaticVariables.Encoding">
            <summary>
            The encoding (default to UTF8).
            </summary>
        </member>
        <member name="M:Radial.StaticVariables.GetConfigPath(System.String)">
            <summary>
            Gets the full path of configuration file.
            </summary>
            <param name="fileName">The configuration file name contains extension.</param>
            <returns>The full path of configuration file.</returns>
        </member>
        <member name="T:Radial.TimingSeq">
            <summary>
            Sequence based on time.
            </summary>
        </member>
        <member name="M:Radial.TimingSeq.Next">
            <summary>
            Create a next value.
            </summary>
            <returns>The value string.</returns>
        </member>
        <member name="M:Radial.TimingSeq.EncodeLong(System.Int64)">
            <summary>
            Encodes the long.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.TimingSeq.Prefix">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="T:Radial.Toolkits">
            <summary>
            Toolkits class.
            </summary>
        </member>
        <member name="M:Radial.Toolkits.GetEnumItem``1(System.Nullable{System.Int32})">
            <summary>
            Gets the enumeration item.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumValue">The enumeration value.</param>
            <returns>The enumeration item, if not match throw a NotSupportedException.</returns>
        </member>
        <member name="M:Radial.Toolkits.GetEnumItemDescription``1(System.Nullable{``0})">
            <summary>
            Gets the enumeration item description.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumValue">The enumeration value.</param>
            <returns>
            The item description, if not find EnumItemAttribute return String.Empty.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.ToIntArray(System.String)">
            <summary>
            Convert ip string to int array.
            </summary>
            <param name="ip">The ip string.</param>
            <returns>int array of ip string.</returns>
        </member>
        <member name="M:Radial.Toolkits.IsIncludedInScope(System.String,System.String,System.String)">
            <summary>
            Determines whether the ip is in range.
            </summary>
            <param name="ip">The ip string</param>
            <param name="beginIp">The range starting ip</param>
            <param name="endIp">The range ending ip</param>
            <returns><c>true</c> if the input ip string is in range ; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radial.Toolkits.FirstCharUpperCase(System.String)">
            <summary>
            Upper case the first char of the input string.
            </summary>
            <param name="input">The input string.</param>
            <returns>new string.</returns>
        </member>
        <member name="M:Radial.Toolkits.Compress(System.String)">
            <summary>
            Compress
            </summary>
            <param name="str">The input string.</param>
            <returns>
            Compressed string.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.Compress(System.Byte[])">
            <summary>
            Compress
            </summary>
            <param name="data">The input data.</param>
            <returns>Compressed data.</returns>
        </member>
        <member name="M:Radial.Toolkits.Decompress(System.String)">
            <summary>
            Decompress.
            </summary>
            <param name="str">The input string.</param>
            <returns>
            Decompressed string.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.Decompress(System.Byte[])">
            <summary>
            Decompress.
            </summary>
            <param name="data">The input data.</param>
            <returns>Decompressed data.</returns>
        </member>
        <member name="M:Radial.Toolkits.ToBase64String(System.String)">
            <summary>
            Convert to Base64 string.
            </summary>
            <param name="data">The input string.</param>
            <returns>
            Base64 string.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.ToBase64String(System.Byte[])">
            <summary>
            Convert to Base64 string.
            </summary>
            <param name="data">The input data.</param>
            <returns>Base64 string.</returns>
        </member>
        <member name="M:Radial.Toolkits.FromBase64String(System.String)">
            <summary>
            Convert to string from Base64 format.
            </summary>
            <param name="base64Str">The input string.</param>
            <returns>
            Decoded string.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.FromBase64StringToBytes(System.String)">
            <summary>
            Convert to byte array from Base64 format.
            </summary>
            <param name="base64Str">The input data.</param>
            <returns>Decoded binary array.</returns>
        </member>
        <member name="M:Radial.Toolkits.GetPingReplies(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the ping replies.
            </summary>
            <param name="host">The host.</param>
            <param name="count">The ping count.</param>
            <param name="interval">The ping interval milliseconds.</param>
            <param name="bytes">The buffer bytes.</param>
            <param name="timeout">The timeout milliseconds.</param>
            <param name="ttl">The TTL.</param>
            <param name="dontFragment">if set to <c>true</c> [dont fragment].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Toolkits.FromUnixTimeStamp(System.Int64)">
            <summary>
            Convert Unix time stamp to local time..
            </summary>
            <param name="timeStamp">The Unix time stamp.</param>
            <returns>
            Local System.DateTime struct.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.FromUnixTimeStamp(System.Int64,System.TimeZoneInfo)">
            <summary>
            Convert Unix time stamp to local time.
            </summary>
            <param name="timeStamp">The Unix time stamp.</param>
            <param name="localTimeZoneInfo">The TimeZoneInfo object of the local time.</param>
            <returns>
            Local System.DateTime struct.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.ToUnixTimeStamp(System.DateTime)">
            <summary>
            Convert local time to Unix time stamp.
            </summary>
            <param name="time">The input local time.</param>
            <returns>
            The Unix time stamp.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.ToUnixTimeStamp(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Convert local time to Unix time stamp.
            </summary>
            <param name="time">The input local time.</param>
            <param name="localTimeZoneInfo">The TimeZoneInfo object of the input local time.</param>
            <returns>
            The Unix time stamp.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.DeepClone(System.Object)">
            <summary>
            Deeps clone.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Toolkits.DeepClone``1(``0)">
            <summary>
            Deeps clone.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Toolkits.TryConvertToString(System.Object,System.String@)">
            <summary>
            Try convert the object to its string value.
            </summary>
            <param name="obj">The object.</param>
            <param name="str">The string value.</param>
            <returns>If obj is null or can not convert return false, otherwirse return its string value.</returns>
        </member>
        <member name="M:Radial.Toolkits.Xor(System.Byte[],System.Byte[])">
            <summary>
            XOR.
            </summary>
            <param name="a">The input bytes a.</param>
            <param name="b">The input bytes b.</param>
            <returns>The XOR value.</returns>
        </member>
        <member name="T:Radial.Validator">
            <summary>
            The validation class.
            </summary>
        </member>
        <member name="M:Radial.Validator.IsEmail(System.String)">
            <summary>
            Determines whether the specified source is email.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is email; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasEmail(System.String)">
            <summary>
            Determines whether the specified source has email.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has email; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsUrl(System.String)">
            <summary>
            Determines whether the specified source is URL.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is URL; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasUrl(System.String)">
            <summary>
            Determines whether the specified source has URL.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has URL; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsDateTime(System.String)">
            <summary>
            Determines whether [is date time] [the specified source].
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is date time] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsMobile(System.String)">
            <summary>
            Determines whether the specified source is mobile.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is mobile; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasMobile(System.String)">
            <summary>
            Determines whether the specified source has mobile.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has mobile; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIP(System.String)">
            <summary>
            Determines whether the specified source is IP.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is IP; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasIP(System.String)">
            <summary>
            Determines whether the specified source has IP.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has IP; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIDCard(System.String)">
            <summary>
            Determines whether [is ID card] [the specified id].
            </summary>
            <param name="Id">The id.</param>
            <returns>
              <c>true</c> if [is ID card] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIDCard18(System.String)">
            <summary>
            Determines whether [is ID card18] [the specified id].
            </summary>
            <param name="Id">The id.</param>
            <returns>
              <c>true</c> if [is ID card18] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIDCard15(System.String)">
            <summary>
            Determines whether [is ID card15] [the specified id].
            </summary>
            <param name="Id">The id.</param>
            <returns>
              <c>true</c> if [is ID card15] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsInt(System.String)">
            <summary>
            Determines whether the specified source is int.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is int; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsTel(System.String)">
            <summary>
            Determines whether the specified source is chinese tel.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is tel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsPostCode(System.String)">
            <summary>
            Determines whether [is post code] [the specified source].
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is post code] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasChinese(System.String)">
            <summary>
            Determines whether the specified source contains chinese character.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if contains chinese characters; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Radial.Net.FileFormData">
            <summary>
            The Http file form data. 
            </summary>
        </member>
        <member name="T:Radial.Net.IMultipartFormData">
            <summary>
            An interface to HTTP multipart/form-data request data.
            </summary>
        </member>
        <member name="M:Radial.Net.IMultipartFormData.Write(System.IO.Stream)">
            <summary>
            Write data to the request stream
            </summary>
            <param name="reqStream">The request stream.</param>
        </member>
        <member name="P:Radial.Net.IMultipartFormData.ParamName">
            <summary>
            Gets the name of the post parameter.
            </summary>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="fileContentType">Type of the file content.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileStream">The file stream.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileStream">The post file stream.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="fileContentType">Type of the file content.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileContent">The post file content.</param>
            <param name="paramName">The post parameter name.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileContent">The post file content.</param>
            <param name="paramName">The post parameter name.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileContent">The post file content.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="fileContentType">Type of the file content.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.Write(System.IO.Stream)">
            <summary>
            Write data to the request stream
            </summary>
            <param name="reqStream">The request stream.</param>
        </member>
        <member name="P:Radial.Net.FileFormData.ParamName">
            <summary>
            Gets the name of the post parameter.
            </summary>
        </member>
        <member name="T:Radial.Net.PlainTextFormData">
            <summary>
            The Http plain text form data. 
            </summary>
        </member>
        <member name="M:Radial.Net.PlainTextFormData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.PlainTextFormData"/> class.
            </summary>
            <param name="paramName">The post parameter name.</param>
            <param name="value">The post parameter value.</param>
        </member>
        <member name="M:Radial.Net.PlainTextFormData.Write(System.IO.Stream)">
            <summary>
            Write data to the request stream
            </summary>
            <param name="reqStream">The request stream.</param>
        </member>
        <member name="P:Radial.Net.PlainTextFormData.ParamName">
            <summary>
            Gets the name of the post parameter.
            </summary>
        </member>
        <member name="T:Radial.Net.HttpResponseObj">
            <summary>
            The wrapper object of HTTP web response.
            </summary>
        </member>
        <member name="M:Radial.Net.HttpResponseObj.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.HttpResponseObj"/> class.
            </summary>
            <param name="webResp">The HttpWebResponse object.</param>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.Code">
            <summary>
            Gets the response status code.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.RawData">
            <summary>
            Gets the response raw data.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.CharacterSet">
            <summary>
            Gets the response character set.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.Text">
            <summary>
            Gets the response text.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.Headers">
            <summary>
            Gets the response headers.
            </summary>
        </member>
        <member name="T:Radial.Net.HttpWebClient">
            <summary>
            Contains HTTP web request methods.
            </summary>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Get(System.String)">
            <summary>
            Http Get method
            </summary>
            <param name="url">The request url(include query string).</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Get(System.Net.HttpWebRequest)">
            <summary>
            Http Get method
            </summary>
            <param name="request">The request(include query string).</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.String)">
            <summary>
            Http Post method use "application/x-www-form-urlencoded" content type.
            </summary>
            <param name="url">The request url(include query string).</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.Net.HttpWebRequest,System.String)">
            <summary>
            Http Post method use "application/x-www-form-urlencoded" content type.
            </summary>
            <param name="request">The request(exclude query string).</param>
            <param name="queryString">The query string.</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.String,Radial.Net.IMultipartFormData[])">
            <summary>
            Http Post method use "multipart/form-data" content type.
            </summary>
            <param name="url">The request url(exclude query string).</param>
            <param name="postDatas">The post data array.</param>
            <returns>
            The HttpResponseObj instance(never null)
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.Net.HttpWebRequest,Radial.Net.IMultipartFormData[])">
            <summary>
            Http Post method use "multipart/form-data" content type.
            </summary>
            <param name="request">The request(exclude query string).</param>
            <param name="datas">The post data array.</param>
            <returns>
            The HttpResponseObj instance(never null)
            </returns>
        </member>
        <member name="T:Radial.Base36Encoder">
            <summary>
            Base36 Encoder Class
            </summary>
        </member>
        <member name="F:Radial.Base36Encoder.Alphabet">
            <summary>
            Base36 alphabet.
            </summary>
        </member>
        <member name="M:Radial.Base36Encoder.ToBase36String(System.UInt64)">
            <summary>
            Convert long value to Base36 string.
            </summary>
            <param name="value">The input value.</param>
            <returns>The Base36 string.</returns>
        </member>
        <member name="M:Radial.Base36Encoder.FromBase36String(System.String)">
            <summary>
            Convert Base36 string to long value.
            </summary>
            <param name="input">The input Base36 string.</param>
            <returns>The long value.</returns>
        </member>
        <member name="T:Radial.Web.FormsAuth">
            <summary>
            Integrated common functions for forms authentication.
            </summary>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(System.String,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="userName">The user name.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(System.String,System.Boolean,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="userName">The user name.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
            <param name="redirect">whether need to redirect from login page.</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(Radial.Web.UserIdentity,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="identity">The user identity.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(Radial.Web.UserIdentity,System.Boolean,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="identity">The user identity.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
            <param name="redirect">if set to <c>true</c> [redirect].</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.RedirectToLoginPage">
            <summary>
            Redirects the user to the login page.
            </summary>
        </member>
        <member name="M:Radial.Web.FormsAuth.RedirectToDefaultPage">
            <summary>
            Redirects the user to the default page.
            </summary>
        </member>
        <member name="M:Radial.Web.FormsAuth.RedirectToLoginPage(System.String)">
            <summary>
            Redirects the browser to the login URL with the specified query string.
            </summary>
            <param name="extraQueryString">The query string to include with the redirect URL.</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignOut">
            <summary>
            User sign out.
            </summary>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignOut(System.Boolean)">
            <summary>
            User sign out.
            </summary>
            <param name="redirect">whether need to redirect to default page.</param>
        </member>
        <member name="P:Radial.Web.FormsAuth.DefaultUrl">
            <summary>
            Gets the URL that the System.Web.Security.FormsAuthentication class willredirect to if no redirect URL is specified.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.LoginUrl">
            <summary>
            The URL for the login page that the System.Web.Security.FormsAuthentication class will redirect to.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.FormsCookieName">
            <summary>
            Gets the name of the cookie used to store the forms-authentication ticket.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.FormsCookiePath">
            <summary>
            Gets the path for the forms-authentication cookie.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.CookieDomain">
            <summary>
            Gets the value of the domain of the forms-authentication cookie.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.CookieMode">
            <summary>
            Gets a value that indicates whether the application is configured for cookieless forms authentication.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.CookiesSupported">
            <summary>
            Gets a value that indicates whether the application is configured to support cookieless forms authentication.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.Timeout">
            <summary>
            Gets the timeout value specified in the configuration file (in minutes).
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.SlidingExpiration">
            <summary>
            Gets a value indicating whether sliding expiration is enabled.
            </summary>
        </member>
        <member name="T:Radial.Web.UploadSettings">
            <summary>
            Upload settings.
            </summary>
        </member>
        <member name="P:Radial.Web.UploadSettings.RootDirectory">
            <summary>
            Gets or sets the root directory relative path, will point to website root ("/") if not set.
            </summary>
        </member>
        <member name="P:Radial.Web.UploadSettings.AllowedExtensions">
            <summary>
            Gets or sets the allowed extensions, separated by '|' (eg docx|exe).
            </summary>
        </member>
        <member name="P:Radial.Web.UploadSettings.MaxFileSize">
            <summary>
            Gets or sets the max file size in KB (less than or equal to 0 means unlimited).
            </summary>
        </member>
        <member name="T:Radial.Web.UploadResult">
            <summary>
            Upload result.
            </summary>
        </member>
        <member name="P:Radial.Web.UploadResult.State">
            <summary>
            Gets or sets the upload state.
            </summary>
        </member>
        <member name="P:Radial.Web.UploadResult.FilePath">
            <summary>
            Gets or sets the upload file relative path.
            </summary>
        </member>
        <member name="T:Radial.Web.UploadState">
            <summary>
            Upload state.
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.UnknownError">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.NotFileSpecified">
            <summary>
            Not file specified.
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.EmptyFileName">
            <summary>
            Empty file name
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.PermissionDenied">
            <summary>
            Permission denied
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.InvalidExtension">
            <summary>
            Invalid extension
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.ExceedMaxSize">
            <summary>
            Exceed max size
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.IllegalCharacter">
            <summary>
            Illegal character
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.NotSet">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:Radial.Web.UploadState.Succeed">
            <summary>
            Succeed
            </summary>
        </member>
        <member name="T:Radial.Web.GeneralUpload">
            <summary>
            General upload.
            </summary>
        </member>
        <member name="M:Radial.Web.GeneralUpload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.GeneralUpload"/> class.
            </summary>
        </member>
        <member name="M:Radial.Web.GeneralUpload.#ctor(Radial.Web.UploadSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.GeneralUpload"/> class.
            </summary>
            <param name="settings">The upload settings.</param>
        </member>
        <member name="M:Radial.Web.GeneralUpload.GetRandomFileName(System.String)">
            <summary>
            Gets the random name of the file.
            </summary>
            <param name="extension">The extension (include dot).</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.GeneralUpload.PrepareDirectory(System.String)">
            <summary>
            Prepares the directory.
            </summary>
            <param name="relativeDirectory">The relative directory.</param>
        </member>
        <member name="M:Radial.Web.GeneralUpload.IsContainsIllegalCharacter(System.String,System.String)">
            <summary>
            Determines whether [is contains illegal character] [the specified file name].
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="directory">The directory.</param>
            <returns>
              <c>true</c> if [is contains illegal character] [the specified file name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Web.GeneralUpload.Save(System.Web.HttpPostedFile,System.Boolean)">
            <summary>
            Save posted file to the root directory.
            </summary>
            <param name="postedFile">The http posted file.</param>
            <param name="saveAsRandomName">A value indicating whether to save file using random name.</param>
            <returns>Upload result.</returns>
        </member>
        <member name="M:Radial.Web.GeneralUpload.Save(System.Web.HttpPostedFile,System.String,System.Boolean)">
            <summary>
            Save posted file to the specified directory.
            </summary>
            <param name="postedFile">The http posted file.</param>
            <param name="storedDirectory">The relative directory where file will be stored.</param>
            <param name="saveAsRandomName">A value indicating whether to save file using random name.</param>
            <returns>Upload result.</returns>
        </member>
        <member name="M:Radial.Web.GeneralUpload.Save(System.Web.HttpPostedFileBase,System.Boolean)">
            <summary>
            Save posted file to the root directory.
            </summary>
            <param name="postedFile">The http posted file.</param>
            <param name="saveAsRandomName">A value indicating whether to save file using random name.</param>
            <returns>Upload result.</returns>
        </member>
        <member name="M:Radial.Web.GeneralUpload.Save(System.Web.HttpPostedFileBase,System.String,System.Boolean)">
            <summary>
            Save posted file to the specified directory.
            </summary>
            <param name="postedFile">The http posted file.</param>
            <param name="storedDirectory">The relative directory where file will be stored.</param>
            <param name="saveAsRandomName">A value indicating whether to save file using random name.</param>
            <returns>Upload result.</returns>
        </member>
        <member name="M:Radial.Web.GeneralUpload.Save(System.String,System.Byte[],System.Boolean)">
            <summary>
            Save upload file to the root directory.
            </summary>
            <param name="uploadFileName">The upload file name (include extension).</param>
            <param name="uploadFileBytes">The upload file bytes.</param>
            <param name="saveAsRandomName">A value indicating whether to save file using random name.</param>
            <returns>Upload result.</returns>
        </member>
        <member name="M:Radial.Web.GeneralUpload.Save(System.String,System.Byte[],System.String,System.Boolean)">
            <summary>
            Save upload file to the specified directory.
            </summary>
            <param name="uploadFileName">The upload file name (include extension).</param>
            <param name="uploadFileBytes">The upload file bytes.</param>
            <param name="storedDirectory">The relative directory.</param>
            <param name="saveAsRandomName">A value indicating whether to save file using random name.</param>
            <returns>Upload result.</returns>
        </member>
        <member name="P:Radial.Web.GeneralUpload.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="P:Radial.Web.GeneralUpload.HttpServerUtility">
            <summary>
            Gets the HTTP server utility.
            </summary>
        </member>
        <member name="T:Radial.Web.HttpCache">
            <summary>
            Http cache class.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpCache.Remove(System.String)">
            <summary>
            Remove cache data.
            </summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key.</param>
            <returns>
            If there has matched key, return the cached data, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Web.HttpCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="T:Radial.Web.HttpKits">
            <summary>
            Toolkits class for http context
            </summary>
        </member>
        <member name="M:Radial.Web.HttpKits.GetCookie(System.String)">
            <summary>
            Get the cookie
            </summary>
            <param name="name">The cookie name</param>
            <returns>If found return the instance, otherwise return null</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.AddCookie(System.Web.HttpCookie)">
            <summary>
            Add cookie
            </summary>
            <param name="cookie">The cookie instance</param>
        </member>
        <member name="M:Radial.Web.HttpKits.SetCookie(System.Web.HttpCookie)">
            <summary>
            Set cookie
            </summary>
            <param name="cookie">The cookie instance</param>
        </member>
        <member name="M:Radial.Web.HttpKits.RemoveCookie(System.String)">
            <summary>
            Remove cookie
            </summary>
            <param name="name">The cookie name</param>
        </member>
        <member name="M:Radial.Web.HttpKits.SetSession(System.String,System.Object)">
            <summary>
            Set value to HttpSessionState
            </summary>
            <param name="name">The session name</param>
            <param name="value">The session value</param>
        </member>
        <member name="M:Radial.Web.HttpKits.SetSession``1(System.String,``0)">
            <summary>
            Set value to HttpSessionState
            </summary>
            <typeparam name="T">The session value type</typeparam>
            <param name="name">The session name</param>
            <param name="value">The session value</param>
        </member>
        <member name="M:Radial.Web.HttpKits.GetSession(System.String)">
            <summary>
            Get value from HttpSessionState
            </summary>
            <param name="name">The session name</param>
            <returns>The session value</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetSession``1(System.String)">
            <summary>
            Get value from HttpSessionState
            </summary>
            <typeparam name="T">The session value type</typeparam>
            <param name="name">The session name</param>
            <returns>
            The session value
            </returns>
        </member>
        <member name="M:Radial.Web.HttpKits.RemoveSession(System.String)">
            <summary>
            Remove session
            </summary>
            <param name="name">The session name</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Byte[])">
            <summary>
            Write the image bytes to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgBytes">The image bytes.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Byte[],System.String)">
            <summary>
            Write the image bytes to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgBytes">The image bytes.</param>
            <param name="contentType">the content type.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Write the image object to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="image">The image.</param>
            <param name="format">The image format.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Write the image object to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="image">The image.</param>
            <param name="format">The image format.</param>
            <param name="contentType">the content type.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.IO.Stream)">
            <summary>
            Write the image stream to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgStream">The image stream.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.IO.Stream,System.String)">
            <summary>
            Write the image stream to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgStream">The image stream.</param>
            <param name="contentType">the content type.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WritePlainText(System.String)">
            <summary>
            Write the plain text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="text">The plain text</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WritePlainText(System.String,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the plain text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="text">The plain text</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson``1(``0,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="obj">The object.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson``1(``0,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="obj">The object.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.Object,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The object.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.Object,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The object.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="json">The json text</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.String,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="json">The json text</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml(System.String,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="xml">The xml text</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml(System.Object,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The obj.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml(System.Object,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The obj.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml``1(``0,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="obj">The obj.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml``1(``0,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="obj">The obj.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.ResolveParameters(System.Uri)">
            <summary>
            Resolves the string to parameters.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            Parameters collection, if parameter string is empty or null return an empty collection.
            </returns>
        </member>
        <member name="M:Radial.Web.HttpKits.ResolveParameters(System.String)">
            <summary>
            Resolves the string to parameters.
            </summary>
            <param name="paramString">The parameter string with &amp; separator.</param>
            <returns>Parameters collection, if parameter string is empty or null return an empty collection.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetContentType(System.String)">
            <summary>
            Get the file extension corresponding Content-Type
            </summary>
            <param name="fileExtension">The file extension(with dot symbol)</param>
            <returns>If found return the Content-Type string, otherwise return "application/octet-stream" as default</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.MakeAbsoluteUrl(System.String)">
            <summary>
            Makes the relative url to absolute url.
            </summary>
            <param name="url">The URL.</param>
            <returns>
            The absolute url.
            </returns>
        </member>
        <member name="M:Radial.Web.HttpKits.MakeRelativeUrl(System.String)">
            <summary>
            Makes the absolute url to relative url.
            </summary>
            <param name="url">The URL.</param>
            <returns>
            The relative url.
            </returns>
        </member>
        <member name="M:Radial.Web.HttpKits.CombineRelativeUrl(System.String[])">
            <summary>
            Combine relative urls.
            </summary>
            <param name="urls">The urls.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.HttpKits.Alert(System.Web.UI.Page,System.String)">
            <summary>
            Javascript Alert.
            </summary>
            <param name="page">The page.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.Alert(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Javascript Alert.
            </summary>
            <param name="page">The page.</param>
            <param name="message">The message.</param>
            <param name="redirectUrl">The redirect url.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.RegisterScript(System.Web.UI.Page,System.String)">
            <summary>
            Registers javascript to System.Web.UI.Page
            </summary>
            <param name="page">The page.</param>
            <param name="script">The script.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.StripHtml(System.String)">
            <summary>
            Strip html code from a hypertext string.
            </summary>
            <param name="strHtml">The hypertext string</param>
            <returns>Plain text string</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.EscapeUrl(System.String)">
            <summary>
            Converts a url string to its escaped representation.
            </summary>
            <param name="url">The input url.</param>
            <returns>A System.String that contains the escaped representation of input url.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.UnescapeUrl(System.String)">
            <summary>
            Converts a url string to its unescaped representation.
            </summary>
            <param name="url">The input url.</param>
            <returns>A System.String that contains the unescaped representation of input url.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetLocation(System.String)">
            <summary>
            Gets the location based on ip address.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <returns>If no location matched return string.Empty, otherwise return the location based on ip address.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetClientIPv4Address(System.Boolean)">
            <summary>
            Get the client IPv4 address.
            </summary>
            <param name="multiValueChooseLast">if set to <c>true</c> will choose last one if there are multiple values in specified http header, otherwise choose the first one.</param>
            <returns>
            If no error occurs return client IPv4 address.
            </returns>
        </member>
        <member name="P:Radial.Web.HttpKits.CurrentContext">
            <summary>
            Gets the current HttpContext instance.
            </summary>
        </member>
        <member name="P:Radial.Web.HttpKits.IsWebApp">
            <summary>
            Gets a value indicating whether this instance is a web application.
            </summary>
            <value>
            	<c>true</c> if this instance is a web application; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Web.HttpKnownFaultException">
            <summary>
            Http known fault exception.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpKnownFaultException.#ctor(System.Int32,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.HttpKnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
            <param name="statusCode">The HTTP status code.</param>
        </member>
        <member name="M:Radial.Web.HttpKnownFaultException.#ctor(System.Int32,System.String,System.Exception,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.HttpKnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception.</param>
            <param name="statusCode">The HTTP status code.</param>
        </member>
        <member name="P:Radial.Web.HttpKnownFaultException.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="T:Radial.Web.HttpPostedFileExtension">
            <summary>
            Extension class of http posted file.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpPostedFileExtension.ToFileFormData(System.Web.HttpPostedFileBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="postedFile">The http posted file.</param>
            <param name="paramName">The post parameter name.</param>
            <returns>The FileFormData instance.</returns>
        </member>
        <member name="M:Radial.Web.HttpPostedFileExtension.ToFileFormData(System.Web.HttpPostedFile,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="postedFile">The http posted file.</param>
            <param name="paramName">The post parameter name.</param>
            <returns>The FileFormData instance.</returns>
        </member>
        <member name="T:Radial.Web.Mvc.AjaxOnlyAttribute">
            <summary>
            Represents an attribute that is used to identifies only allow Ajax request.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.AjaxOnlyAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
            <summary>
             Determines whether the action method selection is valid for the specified controller context.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="methodInfo">Information about the action method.</param>
            <returns> true if the action method selection is valid for the specified controller context; otherwise, false.</returns>
        </member>
        <member name="T:Radial.Web.Mvc.AlertResult">
            <summary>
            Popup javascript alert window.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.AlertResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.AlertResult"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Radial.Web.Mvc.AlertResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.AlertResult"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="redirect">The redirect url.</param>
        </member>
        <member name="M:Radial.Web.Mvc.AlertResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:Radial.Web.Mvc.ControllerExtensions">
            <summary>
            Controller extension class.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Alert(System.Web.Mvc.Controller,System.String)">
            <summary>
            Popup javascript alert window.
            </summary>
            <param name="c">The controller.</param>
            <param name="message">The message.</param>
            <returns>AlertResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Alert(System.Web.Mvc.Controller,System.String,System.String)">
            <summary>
            Popup javascript alert window.
            </summary>
            <param name="c">The controller.</param>
            <param name="message">The message.</param>
            <param name="redirect">The redirect.</param>
            <returns>AlertResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Image(System.Web.Mvc.Controller,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Renders image to the response.
            </summary>
            <param name="c">The controller.</param>
            <param name="imageStream">The image stream.</param>
            <param name="format">The image format.</param>
            <returns>ImageResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Image(System.Web.Mvc.Controller,System.Byte[],System.Drawing.Imaging.ImageFormat)">
            <summary>
            Renders image to the response.
            </summary>
            <param name="c">The controller.</param>
            <param name="imageBytes">The image bytes.</param>
            <param name="format">The image format.</param>
            <returns>ImageResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Image(System.Web.Mvc.Controller,System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Renders image to the response.
            </summary>
            <param name="c">The controller.</param>
            <param name="image">The image.</param>
            <param name="format">The image format.</param>
            <returns>ImageResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Xml(System.Web.Mvc.Controller,System.String)">
            <summary>
            Renders xml to the response.
            </summary>
            <param name="c">The controller.</param>
            <param name="xml">The xml.</param>
            <returns>
            XmlResult instance.
            </returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.NewJson(System.Web.Mvc.Controller,System.Object)">
            <summary>
            Renders json to the response.
            </summary>
            <param name="c">The controller.</param>
            <param name="data">The data.</param>
            <returns>NewJsonResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.KnownFault(System.Web.Mvc.Controller,System.Int32,System.String)">
            <summary>
            Throws a new KnownFaultException and let the system itself to decide how to deal with.
            </summary>
            <param name="c">The controller.</param>
            <param name="errorCode">The error code.</param>
            <param name="message">The message.</param>
            <returns>ThrowKnownFaultResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.KnownFault(System.Web.Mvc.Controller,System.Int32,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Throws a new KnownFaultException and let the system itself to decide how to deal with.
            </summary>
            <param name="c">The controller.</param>
            <param name="errorCode">The error code.</param>
            <param name="message">The message.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
            <returns>ThrowKnownFaultResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.KnownFault(System.Web.Mvc.Controller,System.Int32,System.String,System.Exception)">
            <summary>
            Throws a new KnownFaultException and let the system itself to decide how to deal with.
            </summary>
            <param name="c">The controller.</param>
            <param name="errorCode">The error code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <returns>ThrowKnownFaultResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.KnownFault(System.Web.Mvc.Controller,System.Int32,System.String,System.Exception,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Throws a new KnownFaultException and let the system itself to decide how to deal with.
            </summary>
            <param name="c">The controller.</param>
            <param name="errorCode">The error code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
            <returns>ThrowKnownFaultResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Excel(System.Web.Mvc.Controller,System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String,System.Boolean)">
            <summary>
            Export data to excel file.
            </summary>
            <param name="c">The c.</param>
            <param name="dataTables">The data tables.</param>
            <param name="downloadFileName">The download file name.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
            <returns>ExcelResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Excel(System.Web.Mvc.Controller,System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Export data to excel file.
            </summary>
            <param name="c">The c.</param>
            <param name="dataTable">The data table.</param>
            <param name="downloadFileName">The download file name.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
            <returns>ExcelResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Excel(System.Web.Mvc.Controller,System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Export data to excel file.
            </summary>
            <param name="c">The c.</param>
            <param name="dataSet">The data set.</param>
            <param name="downloadFileName">The download file name.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
            <returns>ExcelResult instance.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.Transfer(System.Web.Mvc.Controller,System.String)">
            <summary>
            Transfers the specified c.
            </summary>
            <param name="c">The c.</param>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.TransferToRoute(System.Web.Mvc.Controller,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Transfers to route.
            </summary>
            <param name="c">The c.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.TransferToRoute(System.Web.Mvc.Controller,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Transfers to route.
            </summary>
            <param name="c">The c.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.TransferToAction(System.Web.Mvc.Controller,System.String)">
            <summary>
            Transfers to action.
            </summary>
            <param name="c">The c.</param>
            <param name="actionName">Name of the action.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.TransferToAction(System.Web.Mvc.Controller,System.String,System.String)">
            <summary>
            Transfers to action.
            </summary>
            <param name="c">The c.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.ControllerExtensions.TransferToAction(System.Web.Mvc.Controller,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Transfers to action.
            </summary>
            <param name="c">The c.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Web.Mvc.ExcelResult">
            <summary>
            Excel Result
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.ExcelResult.#ctor(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.ExcelResult"/> class.
            </summary>
            <param name="dataTable">The data table.</param>
            <param name="downloadFileName">The download file name.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
        </member>
        <member name="M:Radial.Web.Mvc.ExcelResult.#ctor(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.ExcelResult"/> class.
            </summary>
            <param name="dataTables">The data tables.</param>
            <param name="downloadFileName">The download file name.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
        </member>
        <member name="M:Radial.Web.Mvc.ExcelResult.#ctor(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.ExcelResult"/> class.
            </summary>
            <param name="dataSet">The data set.</param>
            <param name="downloadFileName">The download file name.</param>
            <param name="columnHeader">if set to <c>true</c> will set column name as header.</param>
        </member>
        <member name="M:Radial.Web.Mvc.ExcelResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:Radial.Web.Mvc.Filters.ExceptionOutputData">
            <summary>
            A struct represents exception data that will display on screen.
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Filters.ExceptionOutputData.ErrorCode">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Filters.ExceptionOutputData.RequestUrl">
            <summary>
            Request url.
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Filters.ExceptionOutputData.ErrorMessage">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Filters.ExceptionOutputData.ToXml">
            <summary>
            Toes the XML.
            </summary>
            <returns>XML string.</returns>
        </member>
        <member name="M:Radial.Web.Mvc.Filters.ExceptionOutputData.ToJson">
            <summary>
            To the Json.
            </summary>
            <returns>Json string.</returns>
        </member>
        <member name="T:Radial.Web.Mvc.Filters.ExceptionOutputStyle">
            <summary>
            Exception message output style.
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Filters.ExceptionOutputStyle.System">
            <summary>
            Not set the output style, use system default.
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Filters.ExceptionOutputStyle.Xml">
            <summary>
            Wraps the exception to XML output format.
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Filters.ExceptionOutputStyle.Json">
            <summary>
            Wraps the exception to JSON output format.
            </summary>
        </member>
        <member name="T:Radial.Web.Mvc.Filters.HandleExceptionAttribute">
            <summary>
            Represents an attribute that is used to handle and log an exception that is thrown by an action method.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Filters.HandleExceptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Filters.HandleExceptionAttribute"/> class with ExceptionOutputStyle.System.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Filters.HandleExceptionAttribute.#ctor(Radial.Web.Mvc.Filters.ExceptionOutputStyle,System.Int32,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Filters.HandleExceptionAttribute"/> class.
            </summary>
            <param name="outputStyle">The exception output style.</param>
            <param name="defaultErrorCode">The default error code.</param>
            <param name="defaultHttpStatusCode">The default http status code.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Filters.HandleExceptionAttribute.OnException(System.Web.Mvc.ExceptionContext)">
            <summary>
            Called when an exception occurs.
            </summary>
            <param name="filterContext">The action-filter context.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext"/> parameter is null.</exception>
        </member>
        <member name="P:Radial.Web.Mvc.Filters.HandleExceptionAttribute.OutputStyle">
            <summary>
            Gets the output style.
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Filters.HandleExceptionAttribute.DefaultErrorCode">
            <summary>
            Gets the default error code.
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Filters.HandleExceptionAttribute.DefaultHttpStatusCode">
            <summary>
            Gets the default http status code.
            </summary>
        </member>
        <member name="T:Radial.Web.Mvc.HttpKnownFaultResult">
            <summary>
            Throw a new HttpKnownFaultException and let the system itself to decide how to deal with.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.HttpKnownFaultResult.#ctor(System.Int32,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.HttpKnownFaultResult"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
        </member>
        <member name="M:Radial.Web.Mvc.HttpKnownFaultResult.#ctor(System.Int32,System.String,System.Exception,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.HttpKnownFaultResult"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
        </member>
        <member name="M:Radial.Web.Mvc.HttpKnownFaultResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:Radial.Web.Mvc.ImageResult">
            <summary>
            Renders image to the response.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.ImageResult.#ctor(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.ImageResult"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="format">The image format.</param>
        </member>
        <member name="M:Radial.Web.Mvc.ImageResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:Radial.Web.Mvc.ModelBinders.BooleanModelBinder">
            <summary>
            Boolean ModelBinder.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.ModelBinders.BooleanModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model to a value by using the specified controller context and binding context.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="bindingContext">The binding context.</param>
            <returns>
            The bound value.
            </returns>
        </member>
        <member name="T:Radial.Web.Mvc.ModelBinders.JsonModelBinder`1">
            <summary>
            Json ModelBinder.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Radial.Web.Mvc.ModelBinders.JsonModelBinder`1.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model to a value by using the specified controller context and binding context.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="bindingContext">The binding context.</param>
            <returns>
            The bound value.
            </returns>
        </member>
        <member name="T:Radial.Web.Mvc.NewJsonResult">
            <summary>
            NewJsonResult
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.NewJsonResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.NewJsonResult"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Radial.Web.Mvc.NewJsonResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.IPagedList">
            <summary>
            IPagedList
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.IPagedList.CurrentPageIndex">
            <summary>
            Gets or sets the index of the current page.
            </summary>
            <value>
            The index of the current page.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.IPagedList.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>
            The size of the page.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.IPagedList.TotalItemCount">
            <summary>
            Gets or sets the total item count.
            </summary>
            <value>
            The total item count.
            </value>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PagedList`1">
            <summary>
            PagedList
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagedList`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="totalItemCount">The total item count.</param>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagedList`1.CurrentPageIndex">
            <summary>
            Gets or sets the index of the current page.
            </summary>
            <value>
            The index of the current page.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagedList`1.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>
            The size of the page.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagedList`1.TotalItemCount">
            <summary>
            Gets or sets the total item count.
            </summary>
            <value>
            The total item count.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagedList`1.TotalPageCount">
            <summary>
            Gets the total page count.
            </summary>
            <value>
            The total page count.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagedList`1.StartRecordIndex">
            <summary>
            Gets the start index of the record.
            </summary>
            <value>
            The start index of the record.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagedList`1.EndRecordIndex">
            <summary>
            Gets the end index of the record.
            </summary>
            <value>
            The end index of the record.
            </value>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PageLinqExtensions">
            <summary>
            PageLinqExtensions
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PageLinqExtensions.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            To the paged list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="allItems">All items.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PagerBuilder">
            <summary>
            PagerBuilder
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.#ctor(System.Web.Mvc.HtmlHelper,System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.PagerOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagerBuilder"/> class.(适用于PagedList为null时)
            </summary>
            <param name="html">The HTML.</param>
            <param name="ajax">The ajax.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.#ctor(System.Web.Mvc.HtmlHelper,System.Web.Mvc.AjaxHelper,System.String,System.String,System.Int32,System.Int32,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagerBuilder"/> class.
            </summary>
            <param name="html">The HTML.</param>
            <param name="ajax">The ajax.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="totalPageCount">The total page count.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.#ctor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagerBuilder"/> class.
            </summary>
            <param name="helper">The helper.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="totalPageCount">The total page count.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.#ctor(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Int32,System.Int32,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagerBuilder"/> class.
            </summary>
            <param name="helper">The helper.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="totalPageCount">The total page count.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.#ctor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagerBuilder"/> class.
            </summary>
            <param name="helper">The helper.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="totalPageCount">The total page count.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.AddPrevious(System.Collections.Generic.ICollection{Radial.Web.Mvc.Pagination.PagerItem})">
            <summary>
            Adds the previous.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.AddFirst(System.Collections.Generic.ICollection{Radial.Web.Mvc.Pagination.PagerItem})">
            <summary>
            Adds the first.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.AddMoreBefore(System.Collections.Generic.ICollection{Radial.Web.Mvc.Pagination.PagerItem})">
            <summary>
            Adds the more before.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.AddPageNumbers(System.Collections.Generic.ICollection{Radial.Web.Mvc.Pagination.PagerItem})">
            <summary>
            Adds the page numbers.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.AddMoreAfter(System.Collections.Generic.ICollection{Radial.Web.Mvc.Pagination.PagerItem})">
            <summary>
            Adds the more after.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.AddNext(System.Collections.Generic.ICollection{Radial.Web.Mvc.Pagination.PagerItem})">
            <summary>
            Adds the next.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.AddLast(System.Collections.Generic.ICollection{Radial.Web.Mvc.Pagination.PagerItem})">
            <summary>
            Adds the last.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.GenerateUrl(System.Int32)">
            <summary>
            根据页索引生成分页导航Url
            </summary>
            <param name="pageIndex">要生成导航链接的页索引</param>
            <returns>分页导航链接Url</returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.RenderPager">
            <summary>
            生成最终的分页Html代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.BuildGoToPageSection(System.String@)">
            <summary>
            Builds the go to page section.
            </summary>
            <param name="pagerScript">The pager script.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.GenerateAnchor(Radial.Web.Mvc.Pagination.PagerItem)">
            <summary>
            Generates the anchor.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.GeneratePagerElement(Radial.Web.Mvc.Pagination.PagerItem)">
            <summary>
            Generates the pager element.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.GenerateJqAjaxPagerElement(Radial.Web.Mvc.Pagination.PagerItem)">
            <summary>
            Generates the jq ajax pager element.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.GenerateMsAjaxPagerElement(Radial.Web.Mvc.Pagination.PagerItem)">
            <summary>
            Generates the ms ajax pager element.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.CreateWrappedPagerElement(Radial.Web.Mvc.Pagination.PagerItem,System.String)">
            <summary>
            Creates the wrapped pager element.
            </summary>
            <param name="item">The item.</param>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerBuilder.GetCurrentRouteValues(System.Web.Mvc.ViewContext)">
            <summary>
            Gets the current route values.
            </summary>
            <param name="viewContext">The view context.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PagerHelper">
            <summary>
            PagerHelper
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,System.Int32,System.Int32,System.Int32,System.String,System.String,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Object,System.Object)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="totalItemCount">The total item count.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,System.Int32,System.Int32,System.Int32,System.String,System.String,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="totalItemCount">The total item count.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.PagerOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Object)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Object)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Object,System.Object)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Object,System.Object)">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.PagerOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Radial.Web.Mvc.Pagination.PagerOptions,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="totalItemCount">The total item count.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeName">Name of the route.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="totalItemCount">The total item count.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeName">Name of the route.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.Web.Mvc.Ajax.AjaxOptions)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Object,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Object,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Web.Routing.RouteValueDictionary,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.AjaxPager(System.Web.Mvc.HtmlHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.String,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions)">
            <summary>
            Ajaxes the pager.
            </summary>
            <param name="html">The HTML.</param>
            <param name="pagedList">The paged list.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Radial.Web.Mvc.Pagination.PagerOptions,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="totalItemCount">The total item count.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeName">Name of the route.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="totalItemCount">The total item count.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="routeName">Name of the route.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.PagerOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,System.Web.Mvc.Ajax.AjaxOptions)">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions)">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Object,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerHelper.Pager(System.Web.Mvc.AjaxHelper,Radial.Web.Mvc.Pagination.IPagedList,System.String,System.Web.Routing.RouteValueDictionary,Radial.Web.Mvc.Pagination.PagerOptions,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Pagers the specified ajax.
            </summary>
            <param name="ajax">The ajax.</param>
            <param name="pagedList">The paged list.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <param name="pagerOptions">The pager options.</param>
            <param name="ajaxOptions">The ajax options.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PagerItem">
            <summary>
            PagerItem
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerItem.#ctor(System.String,System.Int32,System.Boolean,Radial.Web.Mvc.Pagination.PagerItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagerItem"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="disabled">if set to <c>true</c> [disabled].</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerItem.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>
            The index of the page.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerItem.Disabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Radial.Web.Mvc.Pagination.PagerItem"/> is disabled.
            </summary>
            <value>
              <c>true</c> if disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerItem.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PagerItemType">
            <summary>
            PagerItemType
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PagerItemType.FirstPage">
            <summary>
            FirstPage
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PagerItemType.NextPage">
            <summary>
            NextPage
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PagerItemType.PrevPage">
            <summary>
            PrevPage
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PagerItemType.LastPage">
            <summary>
            LastPage
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PagerItemType.MorePage">
            <summary>
            MorePage
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PagerItemType.NumericPage">
            <summary>
            NumericPage
            </summary>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PagerOptions">
            <summary>
            PagerOptions
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.Pagination.PagerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.Pagination.PagerOptions"/> class.
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.AutoHide">
            <summary>
            当总页数只有一页时是否自动隐藏
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.PageIndexOutOfRangeErrorMessage">
            <summary>
            页索引超出范围时显示的错误消息
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.InvalidPageIndexErrorMessage">
            <summary>
            页索引无效时显示的错误消息
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.PageIndexParameterName">
            <summary>
            url中页索引参数的名称
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ShowPageIndexBox">
            <summary>
            是否显示页索引输入出选择框
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.PageIndexBoxType">
            <summary>
            页索引输入或选择框的类型
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.MaximumPageIndexItems">
            <summary>
            页索引下拉框中显示的最大页索引条数，该属性仅当PageIndexBoxType设为PageIndexBoxType.DropDownList时有效
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ShowGoButton">
            <summary>
            是否显示跳转按钮
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.GoButtonText">
            <summary>
            跳转按钮上的文本
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.PageNumberFormatString">
            <summary>
            数字页索引格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.CurrentPageNumberFormatString">
            <summary>
            当前页索引格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ContainerTagName">
            <summary>
            分页控件html容器标签名，默认为div
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.PagerItemWrapperFormatString">
            <summary>
            包容数字页、当前页及上、下、前、后分页元素的html文本格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.NumericPagerItemWrapperFormatString">
            <summary>
            包容数字页索引分页元素的html文本格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.CurrentPagerItemWrapperFormatString">
            <summary>
            包容当前页分页元素的html文本格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.NavigationPagerItemWrapperFormatString">
            <summary>
            包容上页、下页、首页和尾首四个分页元素的html文本格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.MorePagerItemWrapperFormatString">
            <summary>
            包容更多页分页元素的html文本格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.PageIndexBoxWrapperFormatString">
            <summary>
            包容页索引输入或选择框的html文本格式字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.GoToPageSectionWrapperFormatString">
            <summary>
            包容页索引框及跳转按钮所在区域的html文本框字符串
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.NumericPagerItemCount">
            <summary>
            显示的最大数字页索引按钮数
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ShowPrevNext">
            <summary>
            是否显示上页和下页
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.PrevPageText">
            <summary>
            上一页文本
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.NextPageText">
            <summary>
            下一页文本
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ShowNumericPagerItems">
            <summary>
            是否显示数字页索引按钮及更多页按钮
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ShowFirstLast">
            <summary>
            是否显示第一页和最后一页
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.FirstPageText">
            <summary>
            第一页文本
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.LastPageText">
            <summary>
            最后一页文本
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ShowMorePagerItems">
            <summary>
            是否显示更多页按钮
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.MorePageText">
            <summary>
            更多页按钮文本
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.Id">
            <summary>
            包含分页控件的div标签的ID
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.HorizontalAlign">
            <summary>
            水平对齐方式
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.CssClass">
            <summary>
            CSS样式类
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.ShowDisabledPagerItems">
            <summary>
            whether or not show disabled navigation buttons
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.SeparatorHtml">
            <summary>
            seperating item html
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.MaxPageIndex">
            <summary>
            限制显示的最大页数，默认值为0，即根据总记录数算出的总页数
            </summary>
        </member>
        <member name="P:Radial.Web.Mvc.Pagination.PagerOptions.UseJqueryAjax">
            <summary>
            是否使用jQuery实现Ajax分页(内部用)
            </summary>
        </member>
        <member name="T:Radial.Web.Mvc.Pagination.PageIndexBoxType">
            <summary>
            PageIndexBoxType
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PageIndexBoxType.TextBox">
            <summary>
            文本框输入
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.Pagination.PageIndexBoxType.DropDownList">
            <summary>
            下拉框选择
            </summary>
        </member>
        <member name="T:Radial.Web.Mvc.TransferResult">
            <summary>
            Transfer Result.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.TransferResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.TransferResult"/> class.
            </summary>
            <param name="url">The transfer URL.</param>
        </member>
        <member name="M:Radial.Web.Mvc.TransferResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="P:Radial.Web.Mvc.TransferResult.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="T:Radial.Web.Mvc.TransferToRouteResult">
            <summary>
            Transfer to route result
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.TransferToRouteResult.#ctor(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.TransferToRouteResult"/> class.
            </summary>
            <param name="routeValues">The route values.</param>
        </member>
        <member name="M:Radial.Web.Mvc.TransferToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.TransferToRouteResult"/> class.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
        </member>
        <member name="M:Radial.Web.Mvc.TransferToRouteResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="P:Radial.Web.Mvc.TransferToRouteResult.RouteName">
            <summary>
            Gets or sets the name of the route.
            </summary>
            <value>
            The name of the route.
            </value>
        </member>
        <member name="P:Radial.Web.Mvc.TransferToRouteResult.RouteValues">
            <summary>
            Gets or sets the route values.
            </summary>
            <value>
            The route values.
            </value>
        </member>
        <member name="T:Radial.Web.Mvc.UrlHelperExtensions">
            <summary>
            UrlHelper extension class.
            </summary>
        </member>
        <member name="F:Radial.Web.Mvc.UrlHelperExtensions.ResourceBaseUrlConfigName">
            <summary>
            Resource base url config name. 
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.UrlHelperExtensions.Resource(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Converts a virtual (relative) path to a resource absolute url.
            </summary>
            <param name="helper">The UrlHelper object.</param>
            <param name="contentPath">The virtual path of the content.</param>
            <returns>The resource absolute url.</returns>
        </member>
        <member name="T:Radial.Web.Mvc.WebApi.Formatting.NewJsonMediaTypeFormatter">
            <summary>
            A <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> that supports the following media types:
            "text/json", "application/json" and "application/bson" (for binary Json).
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.NewJsonMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.WebApi.Formatting.NewJsonMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.NewJsonMediaTypeFormatter.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.WebApi.Formatting.NewJsonMediaTypeFormatter"/> class with
            the specified Json serializer settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.NewJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            Writes an object of the specified <paramref name="type" /> to the specified <paramref name="writeStream" />. This method is called during serialization.
            </summary>
            <param name="type">The type of object to write.</param>
            <param name="value">The object to write.</param>
            <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> where the content is being written.</param>
            <param name="transportContext">The <see cref="T:System.Net.TransportContext" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that will write the value to the stream.
            </returns>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.NewJsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Reads an object of the specified <paramref name="type" /> from the specified <paramref name="readStream" />. This method is called during deserialization.
            </summary>
            <param name="type">The type of object to read.</param>
            <param name="readStream">Thestream from which to read</param>
            <param name="content">The content being written.</param>
            <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task`1" />.
            </returns>
        </member>
        <member name="T:Radial.Web.Mvc.WebApi.Formatting.TextMediaTypeFormatter">
            <summary>
            TextMediaTypeFormatter
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.TextMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.WebApi.Formatting.TextMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.TextMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can deserializean object of the specified type.
            </summary>
            <param name="type">The type to deserialize.</param>
            <returns>
            true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can deserialize the type; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.TextMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can serializean object of the specified type.
            </summary>
            <param name="type">The type to serialize.</param>
            <returns>
            true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> can serialize the type; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.TextMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Asynchronously deserializes an object of the specified type.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. It may be null.</param>
            <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> whose result will be an object of the given type.
            </returns>
        </member>
        <member name="M:Radial.Web.Mvc.WebApi.Formatting.TextMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            Asynchronously writes an object of the specified type.
            </summary>
            <param name="type">The type of the object to write.</param>
            <param name="value">The object value to write.  It may be null.</param>
            <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> if available. It may be null.</param>
            <param name="transportContext">The <see cref="T:System.Net.TransportContext" /> if available. It may be null.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that will perform the write.
            </returns>
        </member>
        <member name="T:Radial.Web.Mvc.XmlResult">
            <summary>
            Renders xml to the response.
            </summary>
        </member>
        <member name="M:Radial.Web.Mvc.XmlResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.Mvc.XmlResult"/> class.
            </summary>
            <param name="xml">The xml.</param>
        </member>
        <member name="M:Radial.Web.Mvc.XmlResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult"/> class.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:Radial.Web.UserIdentity">
            <summary>
            A class contains user data.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Id">
            <summary>
            Gets or sets the user id (ensure the value can be serialized and deserialized with JSON format correctly).
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Name">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Others">
            <summary>
            Gets or sets the additional data of user (ensure the value can be serialized and deserialized with JSON format correctly).
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.IsAuthenticated">
            <summary>
            Gets a value that indicates whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.AuthenticationType">
            <summary>
            Gets the type of authentication used.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Current">
            <summary>
            Gets the user of the current principal.
            </summary>
            <exception cref="T:System.Reflection.TargetInvocationException">Can not deserialize to UserIdentity instance from the user data string saved in JSON format.</exception>
        </member>
    </members>
</doc>
