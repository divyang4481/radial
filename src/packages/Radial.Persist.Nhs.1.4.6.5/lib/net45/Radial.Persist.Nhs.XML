<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Radial.Persist.Nhs</name>
    </assembly>
    <members>
        <member name="T:Radial.Persist.Nhs.AppStartModule">
            <summary>
            Application startup http module.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.context_EndRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the EndRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.context_Error(System.Object,System.EventArgs)">
            <summary>
            Handles the Error event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.AppStartModule.NeedSession(System.Web.HttpApplication)">
            <summary>
            Needs the session.
            </summary>
            <param name="app">The app.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Persist.Nhs.BasicRepository`2">
            <summary>
            Basic class of IRepository
            </summary>
            <typeparam name="TObject">The type of persistent object.</typeparam>
            <typeparam name="TKey">The type of the object key.</typeparam>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.#ctor(Radial.Persist.IUnitOfWorkEssential)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.BasicRepository`2"/> class.
            </summary>
            <param name="uow">The IUnitOfWorkEssential instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetDefaultOrderBys(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Sets the default order by snippets.
            </summary>
            <param name="orderBys">The order by snippets.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetExtraCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sets the extra condition which will be used in every default query (but not apply to multi-query, hql and your own query).
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.BuildQueryOver(System.Boolean)">
            <summary>
            Builds the query over.
            </summary>
            <param name="withExtraCondition">if set to <c>true</c> [with extra condition].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.AppendOrderBys(NHibernate.IQueryOver{`0,`0},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Boolean)">
            <summary>
            Appends custom order bys, if there is no custom value use default order bys instead.
            </summary>
            <param name="query">The query.</param>
            <param name="orderBys">The custom order bys.</param>
            <param name="withDefaultOrderBys">if set to <c>true</c> [with default order bys].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IQueryOver{`0})">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IQuery)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.ICriteria)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IMultiCriteria)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SetQueryCacheable(NHibernate.IMultiQuery)">
            <summary>
            Sets the query cacheable.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Exist(`1)">
            <summary>
            Determine whether the object is exists.
            </summary>
            <param name="key">The object key.</param>
            <returns>
              <c>true</c> if the object is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determine whether contains objects that match The condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
              <c>true</c> if objects that match The condition. is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Exist(NHibernate.Criterion.ICriterion)">
            <summary>
            Determine whether contains objects that match The condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
              <c>true</c> if objects that match The condition. is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCount">
            <summary>
            Gets objects total.
            </summary>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCount(NHibernate.Criterion.ICriterion)">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCountInt64">
            <summary>
            Counts objects total.
            </summary>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCountInt64(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetCountInt64(NHibernate.Criterion.ICriterion)">
            <summary>
            Gets objects total using the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            The objects total.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Find(`1)">
            <summary>
            Find object with the specified key.
            </summary>
            <param name="key">The object key.</param>
            <returns>If data exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find object.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            If data exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Find(NHibernate.Criterion.ICriterion)">
            <summary>
            Find object.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            If data exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <param name="orderBys">The order by snippets.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{Radial.Persist.OrderBySnippet{`0}},System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Add(`0)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add objects.
            </summary>
            <param name="objs">The objects.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Save(`0)">
            <summary>
            Add or update an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Remove(`1)">
            <summary>
            Remove an object with the specified key.
            </summary>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Remove(`0)">
            <summary>
            Remove an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Clear">
            <summary>
            Clear all objects.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ToUniqueList(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            To unique item list.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The list does not contains duplicate elements</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="hqls">The hql queries.</param>
            <returns>The query result list.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{NHibernate.ICriteria})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="criterias">The criterias.</param>
            <returns>The IMultiCriteria object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{NHibernate.IQuery})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="queries">The queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{NHibernate.IQueryOver{`0}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="queries">The queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="hqls">The hql queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,NHibernate.ICriteria}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="criterias">The criterias.</param>
            <returns>The IMultiCriteria object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.CreateMultiQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,NHibernate.IQuery}})">
            <summary>
            Creates multiple queries object.
            </summary>
            <param name="queries">The queries.</param>
            <returns>The IMultiQuery object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.NormalizePageIndex(System.Int32)">
            <summary>
            Normalizes the page index parameter.
            </summary>
            <param name="pageIndex">The page index parameter.</param>
            <returns>The normalized page index parameter.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.NormalizePageSize(System.Int32)">
            <summary>
            Normalizes the page size parameter.
            </summary>
            <param name="pageSize">The page size parameter.</param>
            <returns>The normalized page size parameter.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQuery,NHibernate.IQuery,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="countQuery">The count query.</param>
            <param name="dataQuery">The query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            The query result list
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.ICriteria,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            The query result list
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQueryOver{`0},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="query">The query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            The query result list
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQuery,System.Int32,System.Int32)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="query">The data query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>The query result list</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.ICriteria,System.Int32,System.Int32)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="criteria">The data criteria.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>The query result list</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.ExecutePagingQuery(NHibernate.IQueryOver{`0},System.Int32,System.Int32)">
            <summary>
            Execute the paging query.
            </summary>
            <param name="query">The data query.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>The query result list</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The min value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The min value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The max value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The max value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The sum value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The sum value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The average value.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition.</param>
            <returns>
            The average value.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindFirst(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Remove object with the specified condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindByKeys(System.Collections.Generic.IEnumerable{`1},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects by keys.
            </summary>
            <param name="keys">The object keys.</param>
            <param name="orderBys">The order by snippets.</param>
            <returns>
            If data exists and keys not empty, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteNonQuery.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteScalar.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>The first column of the first result row.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteReader.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>System.Data.IDataReader instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Stored procedure ExecuteDataTable.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>System.Data.DataTable instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.SpCreateCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Create System.Data.IDbCommand instance for stored procedure.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <param name="parameters">The stored procedure parameters.</param>
            <returns>
            System.Data.IDbCommand instance.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.Update(`0)">
            <summary>
            Updates an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.BasicRepository`2.FindKeys(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all object keys.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>
            If data exists, return an array, otherwise return an empty array.
            </returns>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.Session">
            <summary>
            Gets the NHibernate session object.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.UseQueryCache">
            <summary>
            Gets or sets a value indicating whether use query cache.
            </summary>
            <value>
              <c>true</c> if use query cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.DefaultOrderBys">
            <summary>
            Gets the default order by snippets.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.ExtraCondition">
            <summary>
            Gets the extra condition which will be used in every default query (but not apply to multi-query, hql and your own query).
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.BasicRepository`2.Item(`1)">
            <summary>
            Find the object with the specified key.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.Cache.Memcached.CacheClient">
            <summary>
            CacheClient
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.#ctor(Enyim.Caching.IMemcachedClient,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Cache.Memcached.CacheClient"/> class.
            </summary>
            <param name="memClient">The mem client.</param>
            <param name="regionName">Name of the region.</param>
            <param name="properties">The config properties.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Clear">
            <summary>
            Clear the Cache
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Destroy">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Get(System.Object)">
            <summary>
            Get the object from the Cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Lock(System.Object)">
            <summary>
            If this is a clustered cache, lock the item
            </summary>
            <param name="key">The Key of the Item in the Cache to lock.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.NextTimestamp">
            <summary>
            Generate a timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Put(System.Object,System.Object)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Remove(System.Object)">
            <summary>
            Remove an item from the Cache.
            </summary>
            <param name="key">The Key of the Item in the Cache to remove.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Unlock(System.Object)">
            <summary>
            If this is a clustered cache, unlock the item
            </summary>
            <param name="key">The Key of the Item in the Cache to unlock.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheClient.BuildRealCacheKey(System.Object)">
            <summary>
            Builds the real cache key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.Cache.Memcached.CacheClient.RegionName">
            <summary>
            Gets the name of the cache region
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.Cache.Memcached.CacheClient.Timeout">
            <summary>
            Get a reasonable "lock timeout"
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.Cache.Memcached.CacheProvider">
            <summary>
            CacheProvider
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Configure the cache
            </summary>
            <param name="regionName">the name of the cache region</param>
            <param name="properties">configuration settings</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.NextTimestamp">
            <summary>
            generate a timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.Start(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Callback to perform any necessary initialization of the underlying cache implementation
            during ISessionFactory construction.
            </summary>
            <param name="properties">current configuration settings</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Cache.Memcached.CacheProvider.Stop">
            <summary>
            Callback to perform any necessary cleanup of the underlying cache implementation
            during <see cref="M:NHibernate.ISessionFactory.Close" />.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.ContextualUnitOfWork">
            <summary>
            NHibernate unit of work class using context bound session.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.ContextualUnitOfWork"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.ResetIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Reset the transaction isolation level.
            </summary>
            <param name="level">The new isolation level.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.PrepareTransaction">
            <summary>
            Prepares the transaction.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterNew``1(``0)">
            <summary>
            Register object which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterNew``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterSave``1(``0)">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterSave``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterDelete``1(``0)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterDelete``2(``1)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <typeparam name="TKey">The type of object key.</typeparam>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterClear``1">
            <summary>
            Register delete all objects.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.Commit">
            <summary>
            Commit changes to data source.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterUpdate``1(``0)">
            <summary>
            Register object which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.ContextualUnitOfWork.RegisterUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="P:Radial.Persist.Nhs.ContextualUnitOfWork.UnderlyingContext">
            <summary>
            Gets the underlying data context object.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.DefaultFactoryPoolInitializer">
            <summary>
            Default hibernate session factory pool initializer.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.IFactoryPoolInitializer">
            <summary>
            Initialize hibernate session factory pool.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.IFactoryPoolInitializer.Execute">
            <summary>
            Execute pool initialization.
            </summary>
            <returns>The session factory wrapper set.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.DefaultFactoryPoolInitializer.Execute">
            <summary>
            Execute pool initialization.
            </summary>
            <returns>
            The session factory wrapper set.
            </returns>
        </member>
        <member name="P:Radial.Persist.Nhs.DefaultFactoryPoolInitializer.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.HibernateEngine">
            <summary>
            Represent a basic NHibernate engine without partition and shard.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.HibernateEngine.SessionFactory">
             <summary>
            The NHibernate.ISessionFactory instance.
             </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Persist.Nhs.HibernateEngine"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.OpenSession">
            <summary>
            Create a database connection and open a ISession on it.
            </summary>
            <returns>ISession instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.OpenAndBindSession">
            <summary>
            Open and bind the specified session to the current context.
            </summary>
            <returns>ISession instance.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.BindSession(NHibernate.ISession)">
            <summary>
            Binds the specified session to the current context.
            </summary>
            <param name="session">The session instance .</param>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.UnbindSession">
            <summary>
            Unbinds and returns the current session.
            </summary>
            <returns>The session instance .</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.HibernateEngine.CloseAndUnbindSession">
            <summary>
            Close and unbind the specified session from the current context.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.HibernateEngine.CurrentSession">
            <summary>
            Gets the current session.
            </summary>
            <returns>The session instance .</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.ITableShardable">
            <summary>
            Indicate table can separate into shards .
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ITableShardable.GetTableMappings(System.String)">
            <summary>
            Gets the shard table mappings.
            </summary>
            <param name="storageAlias">The storage alias.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy">
            <summary>
            SqlServer naming strategy
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.ClassToTableName(System.String)">
            <summary>
            Return a table name for an entity class
            </summary>
            <param name="className">the fully-qualified class name</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.ColumnName(System.String)">
            <summary>
            Alter the column name given in the mapping document
            </summary>
            <param name="columnName">a column name</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.LogicalColumnName(System.String,System.String)">
            <summary>
            Return the logical column name used to refer to a column in the metadata
            (like index, unique constraints etc)
            A full bijection is required between logicalNames and physical ones
            logicalName have to be case insersitively unique for a given table
            </summary>
            <param name="columnName">given column name if any</param>
            <param name="propertyName">property name of this column</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.PropertyToColumnName(System.String)">
            <summary>
            Return a column name for a property path expression
            </summary>
            <param name="propertyName">a property path</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.PropertyToTableName(System.String,System.String)">
            <summary>
            Return a table name for a collection
            </summary>
            <param name="className">the fully-qualified name of the owning entity class</param>
            <param name="propertyName">a property path</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqlServerNamingStrategy.TableName(System.String)">
            <summary>
            Alter the table name given in the mapping document
            </summary>
            <param name="tableName">a table name</param>
            <returns>a table name</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy">
            <summary>
            MySql naming strategy
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.ClassToTableName(System.String)">
            <summary>
            Return a table name for an entity class
            </summary>
            <param name="className">the fully-qualified class name</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.ColumnName(System.String)">
            <summary>
            Alter the column name given in the mapping document
            </summary>
            <param name="columnName">a column name</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.LogicalColumnName(System.String,System.String)">
            <summary>
            Return the logical column name used to refer to a column in the metadata
            (like index, unique constraints etc)
            A full bijection is required between logicalNames and physical ones
            logicalName have to be case insersitively unique for a given table
            </summary>
            <param name="columnName">given column name if any</param>
            <param name="propertyName">property name of this column</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.PropertyToColumnName(System.String)">
            <summary>
            Return a column name for a property path expression
            </summary>
            <param name="propertyName">a property path</param>
            <returns>a column name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.PropertyToTableName(System.String,System.String)">
            <summary>
            Return a table name for a collection
            </summary>
            <param name="className">the fully-qualified name of the owning entity class</param>
            <param name="propertyName">a property path</param>
            <returns>a table name</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.MySqlNamingStrategy.TableName(System.String)">
            <summary>
            Alter the table name given in the mapping document
            </summary>
            <param name="tableName">a table name</param>
            <returns>a table name</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory">
            <summary>
            Naming strategy factory
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.NotFoundDataEngineGeneralConfigFileExceptionMessageFormat">
            <summary>
            The NotFoundDataEngineGeneralConfigFileExceptionMessageFormat.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.NotFoundDbDriverConfigExceptionMessageFormat">
            <summary>
            The NotFoundDbDriverConfigExceptionMessageFormat.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.GetStrategy(System.Type)">
            <summary>
            Gets the strategy.
            </summary>
            <param name="driverClassType">The driver class type.</param>
            <returns>INamingStrategy instance, if not found matched strategy return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.GetStrategy(System.String)">
            <summary>
            Gets the strategy.
            </summary>
            <param name="driverClassTypeString">The driver class type string.</param>
            <returns>INamingStrategy instance, if not found matched strategy return null.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.IsSupported(System.Type)">
            <summary>
            Determines whether the specified driver class type string is supported.
            </summary>
            <param name="driverClassType">The driver class type.</param>
            <returns>
              <c>true</c> if the specified driver class type string is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.IsSupported(System.String)">
            <summary>
            Determines whether the specified driver class type string is supported.
            </summary>
            <param name="driverClassTypeString">The driver class type string.</param>
            <returns>
              <c>true</c> if the specified driver class type string is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.NamingStrategyFactory.GetSupportedStrategyFromConfiguration(System.String)">
            <summary>
            Gets the supported strategy, if not return null.
            </summary>
            <param name="configurationPath">The configuration path.</param>
            <returns>The INamingStrategy instance, if not found supported strategy return null.</returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy">
            <summary>
            Sqlite naming strategy.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.ClassToTableName(System.String)">
            <summary>
            Return a table name for an entity class
            </summary>
            <param name="className">the fully-qualified class name</param>
            <returns>
            a table name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.ColumnName(System.String)">
            <summary>
            Alter the column name given in the mapping document
            </summary>
            <param name="columnName">a column name</param>
            <returns>
            a column name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.LogicalColumnName(System.String,System.String)">
            <summary>
            Return the logical column name used to refer to a column in the metadata
            (like index, unique constraints etc)
            A full bijection is required between logicalNames and physical ones
            logicalName have to be case insersitively unique for a given table
            </summary>
            <param name="columnName">given column name if any</param>
            <param name="propertyName">property name of this column</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.PropertyToColumnName(System.String)">
            <summary>
            Return a column name for a property path expression
            </summary>
            <param name="propertyName">a property path</param>
            <returns>
            a column name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.PropertyToTableName(System.String,System.String)">
            <summary>
            Return a table name for a collection
            </summary>
            <param name="className">the fully-qualified name of the owning entity class</param>
            <param name="propertyName">a property path</param>
            <returns>
            a table name
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.NamingStrategy.SqliteNamingStrategy.TableName(System.String)">
            <summary>
            Alter the table name given in the mapping document
            </summary>
            <param name="tableName">a table name</param>
            <returns>
            a table name
            </returns>
        </member>
        <member name="T:Radial.Persist.Nhs.NhUnitOfWork">
            <summary>
            NHibernate unit of work class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.NhUnitOfWork"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.NhUnitOfWork"/> class.
            </summary>
            <param name="alias">The storage alias (case insensitive, can be null or empty).</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.ResetIsolationLevel(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Reset the transaction isolation level.
            </summary>
            <param name="level">The new isolation level.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.PrepareTransaction">
            <summary>
            Prepares the transaction.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterNew``1(``0)">
            <summary>
            Register object which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterNew``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterSave``1(``0)">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterSave``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted or updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterDelete``1(``0)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterDelete``2(``1)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <typeparam name="TKey">The type of object key.</typeparam>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterClear``1">
            <summary>
            Register delete all objects.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.Commit">
            <summary>
            Commit changes to data source.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterUpdate``1(``0)">
            <summary>
            Register object which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.NhUnitOfWork.RegisterUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be updated.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="P:Radial.Persist.Nhs.NhUnitOfWork.UnderlyingContext">
            <summary>
            Gets the underlying data context object.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.Order.SqlServerRandomOrder">
            <summary>
            SqlServerRandomOrder
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Order.SqlServerRandomOrder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Order.SqlServerRandomOrder"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Order.SqlServerRandomOrder.ToSqlString(NHibernate.ICriteria,NHibernate.Criterion.ICriteriaQuery)">
            <summary>
            Render the SQL fragment
            </summary>
            <param name="criteria"></param>
            <param name="criteriaQuery"></param>
            <returns></returns>
        </member>
        <member name="T:Radial.Persist.Nhs.Param.NhParam">
            <summary>
            IParam implementation using NHibernate. 
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.EnableCache">
            <summary>
            The enable cache.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.CacheKey">
            <summary>
            The cache key.
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.CacheMinutes">
            <summary>
            The cache minutes (0=do not remove cache).
            </summary>
        </member>
        <member name="F:Radial.Persist.Nhs.Param.NhParam.StorageAlias">
            <summary>
            Storage alias.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Param.NhParam"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.ReadFromDatabase">
            <summary>
            Reads from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.WriteToDatabase">
            <summary>
            Writes to database.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.LoadRootElement">
            <summary>
            Loads the root element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.SaveRootElement(System.Xml.Linq.XElement)">
            <summary>
            Saves the root element.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.SetToCache(Radial.Persist.Nhs.Param.ParamItem)">
            <summary>
            Sets ParamItem to cache.
            </summary>
            <param name="item">The ParamItem item.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.RetrieveFromCache">
            <summary>
            Retrieves ParamItem from cache.
            </summary>
            <returns>The ParamItem item</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.BuildXName(System.String)">
            <summary>
            Builds the name with xmlns.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.LoadObject(System.Xml.Linq.XElement)">
            <summary>
            Loads the param object from XElement.
            </summary>
            <param name="e">The XElement.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the element.
            </summary>
            <param name="root">The root.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.RecursiveCreateParent(System.Xml.Linq.XElement,System.String)">
            <summary>
            Recursives the create parent.
            </summary>
            <param name="root">The root.</param>
            <param name="childPath">The child path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Create(System.String,System.String,System.String)">
            <summary>
            Create new param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
            <returns>
            If successful created, return param object.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Update(System.String,System.String,System.String)">
            <summary>
            Update param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The new description.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return the object, otherwise return null.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise return string.Empty.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.NhParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Radial.Persist.Nhs.Param.ParamItem">
            <summary>
            Param Item
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.ParamItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.Param.ParamItem"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.ParamItem.ToCacheString">
            <summary>
            To the cache string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.Nhs.Param.ParamItem.FromCacheString(System.String)">
            <summary>
            Froms the cache string.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.Param.ParamItem.XmlContent">
            <summary>
            Gets or sets the xml based content.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.Param.ParamItem.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.SessionFactoryPool">
            <summary>
            Hibernate session factory pool.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Persist.Nhs.SessionFactoryPool"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GeFactorytWrapper(System.String)">
            <summary>
            Gets the SessionFactoryWrapper object with the specified storage alias.
            </summary>
            <param name="storageAlias">The storage alias (case insensitive).</param>
            <returns>The SessionFactoryWrapper object.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GetFactoryWrappers(System.String[])">
            <summary>
            Gets the SessionFactoryWrapper object with the specified storage aliases.
            </summary>
            <param name="storageAliases">The storage alias array (case insensitive).</param>
            <returns>The SessionFactoryWrapper object array.</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GetFactoryInstance(System.String)">
            <summary>
            Gets the <see cref="T:NHibernate.ISessionFactory"/> instance with the specified storage alias.
            </summary>
            <param name="factoryAlias">The storage alias (case insensitive).</param>
            <returns>The NHibernate.ISessionFactory instance</returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.GetStorageAliases">
            <summary>
            Gets all storage aliases.
            </summary>
            <returns>
            The storage aliases array.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryPool.OpenSession(System.String)">
            <summary>
            Open a new session using the specified storage alias.
            </summary>
            <param name="alias">The storage alias (case insensitive).</param>
            <returns>A new ISession instance.</returns>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryPool.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryPool.First">
            <summary>
            Gets the first NHibernate.ISessionFactory instance.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.SessionFactoryWrapper">
            <summary>
            A wrapper class of ISessionFactory instance.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.#ctor(System.String,NHibernate.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.Nhs.SessionFactoryWrapper"/> class.
            </summary>
            <param name="alias">The storage alias (case insensitive).</param>
            <param name="factory">The factory instance.</param>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.SessionFactoryWrapper.Equals(Radial.Persist.StorageAliasConfig)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryWrapper.Alias">
            <summary>
            Gets the storage alias.
            </summary>
        </member>
        <member name="P:Radial.Persist.Nhs.SessionFactoryWrapper.Factory">
            <summary>
            Gets the factory instance.
            </summary>
        </member>
        <member name="T:Radial.Persist.Nhs.ShardTableMapping">
            <summary>
            Table shard mapping.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.ShardTableMapping.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Radial.Persist.Nhs.ShardTableMapping.Equals(Radial.Persist.Nhs.ShardTableMapping)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:Radial.Persist.Nhs.ShardTableMapping.ObjectType">
            <summary>
            Gets or sets the full type of the object.
            </summary>
            <value>
            The type of the object.
            </value>
        </member>
        <member name="P:Radial.Persist.Nhs.ShardTableMapping.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="T:Radial.Persist.Nhs.TimingIdGenerator">
            <summary>
            Identifier generator based on time.
            </summary>
        </member>
        <member name="M:Radial.Persist.Nhs.TimingIdGenerator.Generate(NHibernate.Engine.ISessionImplementor,System.Object)">
            <summary>
            Generate a new identifier
            </summary>
            <param name="session">The <see cref="T:NHibernate.Engine.ISessionImplementor" /> this id is being generated in.</param>
            <param name="obj">The entity for which the id is being generated.</param>
            <returns>
            The new identifier
            </returns>
        </member>
    </members>
</doc>
