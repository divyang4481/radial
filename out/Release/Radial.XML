<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Radial</name>
    </assembly>
    <members>
        <member name="T:Radial.Base62Encoder">
            <summary>
            Base62 Encoder Class
            </summary>
        </member>
        <member name="F:Radial.Base62Encoder.Alphabet">
            <summary>
            Base62 alphabet.
            </summary>
        </member>
        <member name="M:Radial.Base62Encoder.ToBase62String(System.UInt64)">
            <summary>
            Convert long value to Base62 string.
            </summary>
            <param name="value">The input value.</param>
            <returns>The Base62 string.</returns>
        </member>
        <member name="M:Radial.Base62Encoder.FromBase62String(System.String)">
            <summary>
            Convert Base62 string to long value.
            </summary>
            <param name="input">The input Base62 string.</param>
            <returns>The long value.</returns>
        </member>
        <member name="T:Radial.Boot.StartupHttpModule">
            <summary>
            Startup Http Module
            </summary>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule" />.
            </summary>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application </param>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.Boot.StartupHttpModule.context_EndRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the EndRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Radial.Boot.Bootstrapper">
            <summary>
            System bootstrapper.
            </summary>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.RegisterTask(Radial.Boot.IBootTask)">
            <summary>
            Registers boot task.
            </summary>
            <param name="task">The boot task.</param>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.RegisterTask(Radial.Boot.IBootTask,System.Int32)">
            <summary>
            Registers boot task.
            </summary>
            <param name="task">The boot task.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.Initialize">
            <summary>
            System initialize process.
            </summary>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.Start">
            <summary>
            Start system.
            </summary>
        </member>
        <member name="M:Radial.Boot.Bootstrapper.Stop">
            <summary>
            Stop system.
            </summary>
        </member>
        <member name="P:Radial.Boot.Bootstrapper.IsInitialized">
            <summary>
            Gets a value indicating whether system is successful initialized.
            </summary>
            <value>
            <c>true</c> if successful initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Boot.Cfg.BootTaskElement">
            <summary>
            Boot task configuration element
            </summary>
        </member>
        <member name="P:Radial.Boot.Cfg.BootTaskElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Radial.Boot.Cfg.BootTaskElement.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
        </member>
        <member name="T:Radial.Boot.Cfg.BootTaskElementCollection">
            <summary>
            Boot task configuration element collection
            </summary>
        </member>
        <member name="M:Radial.Boot.Cfg.BootTaskElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Radial.Boot.Cfg.BootTaskElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="T:Radial.Boot.Cfg.BootTaskSection">
            <summary>
            Boot task configuration section.
            </summary>
        </member>
        <member name="P:Radial.Boot.Cfg.BootTaskSection.Tasks">
            <summary>
            Gets the boot tasks.
            </summary>
        </member>
        <member name="T:Radial.Cache.CacheStatic">
            <summary>
            The entrance static class of ICache instance.
            </summary>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Set(System.String,System.Object)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Set``1(System.String,``0)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Set(System.String,System.Object,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Set``1(System.String,``0,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <returns>If there has matched data, return the cached object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Get``1(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <returns>If there has matched data, return the cached object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Gets(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Gets``1(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Remove(System.String)">
            <summary>
            Remove cache key and its value.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
        </member>
        <member name="M:Radial.Cache.CacheStatic.Clear">
            <summary>
             Clear cache.
            </summary>
        </member>
        <member name="P:Radial.Cache.CacheStatic.Instance">
            <summary>
            Gets the ICache instance.
            </summary>
        </member>
        <member name="T:Radial.Cache.EmptyCache">
            <summary>
            The default ICache concret class with no cache implement
            </summary>
        </member>
        <member name="T:Radial.Cache.ICache">
            <summary>
            Cache interface.
            </summary>
        </member>
        <member name="M:Radial.Cache.ICache.Set(System.String,System.Object)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Cache.ICache.Set``1(System.String,``0)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Cache.ICache.Set(System.String,System.Object,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Cache.ICache.Set``1(System.String,``0,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.ICache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Cache.ICache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <returns>If there has matched data, return the cached object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Cache.ICache.Get``1(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <returns>If there has matched data, return the cached object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Cache.ICache.Gets(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Cache.ICache.Gets``1(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Cache.ICache.Remove(System.String)">
            <summary>
            Remove cache key and its value.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
        </member>
        <member name="M:Radial.Cache.ICache.Clear">
            <summary>
             Clear cache.
            </summary>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Set(System.String,System.Object)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Set``1(System.String,``0)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <returns>
            If there has matched data, return the cached object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Get``1(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <returns>
            If there has matched data, return the cached object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Gets(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Gets``1(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Remove(System.String)">
            <summary>
            Remove cache key and its value.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Clear">
            <summary>
            Clear cache.
            </summary>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Set(System.String,System.Object,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Cache.EmptyCache.Set``1(System.String,``0,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="T:Radial.Components">
            <summary>
            Components
            </summary>
        </member>
        <member name="P:Radial.Components.Container">
            <summary>
            Gets the container.
            </summary>
        </member>
        <member name="T:Radial.Drawing.FontWarpFactor">
            <summary>
            Amount of random font warping to apply to rendered text
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Radial.Drawing.FontWarpFactor.Extreme">
            <summary>
            Extreme
            </summary>
        </member>
        <member name="T:Radial.Drawing.BackgroundNoiseLevel">
            <summary>
            Amount of background noise to add to rendered image
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Radial.Drawing.BackgroundNoiseLevel.Extreme">
            <summary>
            Extreme
            </summary>
        </member>
        <member name="T:Radial.Drawing.LineNoiseLevel">
            <summary>
            Amount of curved line noise to add to rendered image
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:Radial.Drawing.LineNoiseLevel.Extreme">
            <summary>
            Extreme
            </summary>
        </member>
        <member name="T:Radial.Drawing.Captcha">
            <summary>
            CAPTCHA Image
            </summary>
            <seealso href="http://www.codinghorror.com">Original By Jeff Atwood</seealso>
        </member>
        <member name="F:Radial.Drawing.Captcha.RandomFontFamily">
            <summary>
            RandomFontFamily
            </summary>
        </member>
        <member name="F:Radial.Drawing.Captcha.RandomColor">
            <summary>
            RandomColor
            </summary>
        </member>
        <member name="M:Radial.Drawing.Captcha.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Drawing.Captcha"/> class.
            </summary>
        </member>
        <member name="M:Radial.Drawing.Captcha.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Drawing.Captcha"/> class.
            </summary>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Drawing.Captcha"/> class.
            </summary>
            <param name="text">The captcha text.</param>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.RenderImage">
            <summary>
            Forces a new Captcha image to be generated using current property value settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RenderImage(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Forces a new Captcha image to be generated using current property value settings.
            </summary>
            <param name="format">The image format.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RenderImageBytes(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Forces a new Captcha image to be generated using current property value settings.
            </summary>
            <param name="format">The image format.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GetRandomFontFamily">
            <summary>
            Returns a random font family from the font whitelist
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GenerateRandomText">
            <summary>
            generate random text for the CAPTCHA
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RandomPoint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a random point within the specified x and y ranges
            </summary>
            <param name="xmin">The xmin.</param>
            <param name="xmax">The xmax.</param>
            <param name="ymin">The ymin.</param>
            <param name="ymax">The ymax.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GetRandomColor">
            <summary>
            Randoms the color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.RandomPoint(System.Drawing.Rectangle)">
            <summary>
            Returns a random point within the specified rectangle
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.TextPath(System.String,System.Drawing.Font,System.Drawing.Rectangle)">
            <summary>
            Returns a GraphicsPath containing the specified string and font
            </summary>
            <param name="s">The s.</param>
            <param name="f">The f.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GetFont">
            <summary>
            Returns the CAPTCHA font in an appropriate size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.GenerateImagePrivate">
            <summary>
            Renders the CAPTCHA image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Drawing.Captcha.WarpText(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Rectangle)">
            <summary>
            Warp the provided text GraphicsPath by a variable amount
            </summary>
            <param name="textPath">The text path.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.AddNoise(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Add a variable level of graphic noise to the image
            </summary>
            <param name="g">The graphics obj.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Radial.Drawing.Captcha.AddLine(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Add variable level of curved lines to the image
            </summary>
            <param name="g">The graphics obj.</param>
            <param name="rect">The rect.</param>
        </member>
        <member name="P:Radial.Drawing.Captcha.TextChars">
            <summary>
            Gets or sets a string of available text characters for the generator to use.
            </summary>
            <value>The text chars.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.TextLength">
            <summary>
            Gets or sets the length of the text.
            </summary>
            <value>The length of the text.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.FontWarp">
            <summary>
            Gets and sets amount of random warping to apply to the <see cref="T:Radial.Drawing.Captcha"/> instance.
            </summary>
            <value>The font warp.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.BackgroundNoise">
            <summary>
            Gets and sets amount of background noise to apply to the <see cref="T:Radial.Drawing.Captcha"/> instance.
            </summary>
            <value>The background noise.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.LineNoise">
            <summary>
            Gets or sets amount of line noise to apply to the <see cref="T:Radial.Drawing.Captcha"/> instance.
            </summary>
            <value>The line noise.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.CanvasColor">
            <summary>
            Gets or sets the canvas color.
            </summary>
            <value>
            The canvas color.
            </value>
        </member>
        <member name="P:Radial.Drawing.Captcha.RenderedAt">
            <summary>
            Returns the date and time this image was last rendered
            </summary>
            <value>The rendered at.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.Text">
            <summary>
            Gets the randomly generated Captcha text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.Width">
            <summary>
            Width of Captcha image to generate, in pixels
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Radial.Drawing.Captcha.Height">
            <summary>
            Height of Captcha image to generate, in pixels
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:Radial.Checker">
            <summary>
            Tools for check whether a condition is valid.
            </summary>
        </member>
        <member name="M:Radial.Checker.Requires(System.Boolean,System.String,System.Object[])">
            <summary>
            Check whether the condition is true, otherwise throw an Exception.
            </summary>
            <param name="condition">The condition.</param>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="M:Radial.Checker.Parameter(System.Boolean,System.String,System.Object[])">
            <summary>
            Check whether the condition is true, otherwise throw an ArgumentException.
            </summary>
            <param name="condition">The condition.</param>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="M:Radial.Checker.Parameter(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Check whether the condition is true, otherwise throw an ArgumentException.
            </summary>
            <param name="condition">The condition.</param>
            <param name="paramName">The name of the parameter.</param>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="T:Radial.Drawing.ImageKits">
            <summary>
            Toolkits class for image.
            </summary>
        </member>
        <member name="M:Radial.Drawing.ImageKits.Crop(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crop the original image.
            </summary>
            <param name="original">The original image.</param>
            <param name="x">The x-coordinate of the upper-left corner of the image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the image.</param>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image.</param>
            <returns>
            The cropped image .
            </returns>
        </member>
        <member name="M:Radial.Drawing.ImageKits.Thumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Generates the thumbnail of the original image.
            </summary>
            <param name="original">The original image.</param>
            <param name="width">The width, in pixels, of the requested thumbnail image.</param>
            <param name="height">The height, in pixels, of the requested thumbnail image.</param>
            <returns>
            An Image that represents the thumbnail.
            </returns>
        </member>
        <member name="T:Radial.EnumItemAttribute">
            <summary>
            Used to describe the enumeration item.
            </summary>
        </member>
        <member name="M:Radial.EnumItemAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.EnumItemAttribute"/> class.
            </summary>
            <param name="description">The item description.</param>
        </member>
        <member name="P:Radial.EnumItemAttribute.Description">
            <summary>
            Gets the item description.
            </summary>
        </member>
        <member name="T:Radial.Extensions.EnumerableExtensions">
            <summary>
            <![CDATA[
            Provides a set of static (Shared in Visual Basic) methods for querying objects that implement System.Collections.Generic.IEnumerable<T>
            ]]>
            </summary>
        </member>
        <member name="M:Radial.Extensions.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
        </member>
        <member name="T:Radial.FileWatcher">
            <summary>
            Monitor file, and raise event while it changes. 
            </summary>
        </member>
        <member name="M:Radial.FileWatcher.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.FileWatcher"/> class.
            </summary>
        </member>
        <member name="M:Radial.FileWatcher.CreateMonitor(System.String,Radial.FileWatcher.ReloadHandler)">
            <summary>
            Creates the monitor.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="reloadProcess">The reload process.</param>
        </member>
        <member name="M:Radial.FileWatcher.watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Manipulate file change event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.FileSystemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Radial.FileWatcher.TimerCallback(System.Object)">
            <summary>
            Timer callback.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:Radial.FileWatcher.ReloadHandler">
            <summary>
            Reload file delegate.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="T:Radial.Boot.IBootTask">
            <summary>
            Boot task interface.
            </summary>
        </member>
        <member name="M:Radial.Boot.IBootTask.Initialize">
            <summary>
            System initialize process.
            </summary>
        </member>
        <member name="M:Radial.Boot.IBootTask.Start">
            <summary>
            Start system.
            </summary>
        </member>
        <member name="M:Radial.Boot.IBootTask.Stop">
            <summary>
            Stop system.
            </summary>
        </member>
        <member name="T:Radial.Net.ContentTypes">
            <summary>
            Content types.
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.PlainText">
            <summary>
            Plain Text Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Html">
            <summary>
            Html Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Xml">
            <summary>
            Xml Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Json">
            <summary>
            Json Content Type
            </summary>
        </member>
        <member name="F:Radial.Net.ContentTypes.Excel">
            <summary>
            Excel Content Type
            </summary>
        </member>
        <member name="T:Radial.Persist.IRepository`2">
            <summary>
            IRepository interface.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TKey">The type of the object key.</typeparam>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Exist(`1)">
            <summary>
            Determine whether the object is exists.
            </summary>
            <param name="key">The object key.</param>
            <returns>
              <c>true</c> if the object is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determine whether contains objects that match The condition..
            </summary>
            <param name="condition">The condition..</param>
            <returns>
              <c>true</c> if objects that match The condition. is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCount">
            <summary>
            Gets objects count.
            </summary>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects count using the specified condition.
            </summary>
            <param name="condition">The condition..</param>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCountInt64">
            <summary>
            Counts objects count.
            </summary>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetCountInt64(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets objects count using the specified condition.
            </summary>
            <param name="condition">The condition..</param>
            <returns>
            The objects count.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>
            The min value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMin``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the min value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition..</param>
            <returns>
            The min value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The max value.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetMax``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the max value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition..</param>
            <returns>
            The max value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The sum value.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetSum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the sum value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition..</param>
            <returns>
            The sum value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <returns>The average value.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.GetAverage``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the average value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="condition">The condition..</param>
            <returns>
            The average value.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Find(`1)">
            <summary>
            Find object with the specified key.
            </summary>
            <param name="key">The object key.</param>
            <returns>If data exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find object.
            </summary>
            <param name="condition">The condition..</param>
            <returns>
            If data exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindFirst(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find the first object.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return the first object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll">
            <summary>
            Find all objects.
            </summary>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <param name="orderBys">The order by snippets</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[])">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(Radial.Persist.OrderBySnippet{`0}[],System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition..</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[],System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition..</param>
            <param name="orderBys">The order by snippets.</param>
            <param name="returnObjectCount">The number of objects returned.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[],System.Int32,System.Int32)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Radial.Persist.OrderBySnippet{`0}[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all objects.
            </summary>
            <param name="condition">The condition.</param>
            <param name="orderBys">The order by snippets</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The number of total objects.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Add(`0)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add objects.
            </summary>
            <param name="objs">The objects.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Save(`0)">
            <summary>
            Save an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Remove(`1)">
            <summary>
            Remove an object with the specified key.
            </summary>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Remove(`0)">
            <summary>
            Remove an object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Remove object with the specified condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Radial.Persist.IRepository`2.Clear">
            <summary>
            Clear all objects.
            </summary>
        </member>
        <member name="P:Radial.Persist.IRepository`2.Item(`1)">
            <summary>
            Find the object with the specified key.
            </summary>
        </member>
        <member name="T:Radial.Persist.IStoragePolicy">
            <summary>
            Storage policy.
            </summary>
        </member>
        <member name="M:Radial.Persist.IStoragePolicy.GetAlias(System.Object[])">
            <summary>
            Gets the storage alias.
            </summary>
            <param name="keys">The keys according to.</param>
            <returns>The storage alias.</returns>
        </member>
        <member name="M:Radial.Persist.IStoragePolicy.GetAliases">
            <summary>
            Get all available storage aliases.
            </summary>
            <returns>The storage alias array.</returns>
        </member>
        <member name="T:Radial.Persist.IUnitOfWork">
            <summary>
            Unit of work interface.
            </summary>
        </member>
        <member name="T:Radial.Persist.IUnitOfWorkEssential">
            <summary>
            Represents basic methods of the unit of work.
            </summary>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterNew``1(``0)">
            <summary>
            Register object which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterNew``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be inserted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterSave``1(``0)">
            <summary>
            Register object which will be saved.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterSave``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be saved.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterDelete``1(``0)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="obj">The object instance.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Register object set which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <param name="objs">The object set.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterDelete``2(``1)">
            <summary>
            Register object which will be deleted.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
            <typeparam name="TKey">The type of object key.</typeparam>
            <param name="key">The object key.</param>
        </member>
        <member name="M:Radial.Persist.IUnitOfWorkEssential.RegisterClear``1">
            <summary>
            Register delete all objects.
            </summary>
            <typeparam name="TObject">The type of object.</typeparam>
        </member>
        <member name="P:Radial.Persist.IUnitOfWorkEssential.UnderlyingContext">
            <summary>
            Gets the underlying data context object.
            </summary>
        </member>
        <member name="M:Radial.Persist.IUnitOfWork.Commit">
            <summary>
            Commit changes to data source.
            </summary>
        </member>
        <member name="T:Radial.Persist.OrderBySnippet`1">
            <summary>
            The order by snippet
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Radial.Persist.OrderBySnippet`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Persist.OrderBySnippet`1"/> class.
            </summary>
            <param name="property">The sort property.</param>
            <param name="isAscending">if set to <c>true</c> [the property will sort in ascending].</param>
        </member>
        <member name="P:Radial.Persist.OrderBySnippet`1.Property">
            <summary>
            Gets the sort property.
            </summary>
        </member>
        <member name="P:Radial.Persist.OrderBySnippet`1.IsAscending">
            <summary>
            Gets a value indicating whether the property will sort in ascending.
            </summary>
            <value>
            	<c>true</c> if the property will sort in ascending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Persist.StorageRouter">
            <summary>
            Storage router.
            </summary>
        </member>
        <member name="M:Radial.Persist.StorageRouter.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.Persist.StorageRouter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Persist.StorageRouter.BuildXName(System.String)">
            <summary>
            Builds the name with xmlns.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Radial.Persist.StorageRouter"/> class from being created.
            </summary>
        </member>
        <member name="M:Radial.Persist.StorageRouter.Initial(System.String)">
            <summary>
            Initials the specified config file path.
            </summary>
            <param name="configFilePath">The config file path.</param>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStoragePolicyInstance``1">
            <summary>
            Gets the storage policy instance.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>IStoragePolicy instance.</returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStoragePolicyInstance(System.Type)">
            <summary>
            Gets the storage policy instance.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>IStoragePolicy instance.</returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStorageAlias``1(System.Object[])">
            <summary>
            Gets the storage alias.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="keys">The keys according to.</param>
            <returns>The storage alias.</returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStorageAlias(System.Type,System.Object[])">
            <summary>
            Gets the storage alias.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="keys">The keys according to.</param>
            <returns>The storage alias.</returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStorageAliases``1">
            <summary>
            Get all storage aliases.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The storage alias array.</returns>
        </member>
        <member name="M:Radial.Persist.StorageRouter.GetStorageAliases(System.Type)">
            <summary>
            Get all storage aliases.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>The storage alias array.</returns>
        </member>
        <member name="P:Radial.Persist.StorageRouter.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Radial.Persist.StorageRouter.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="P:Radial.Persist.StorageRouter.StoragePolicyConfigItemSet">
            <summary>
            Gets or sets the storage policy config item set.
            </summary>
            <value>
            The storage policy config item set.
            </value>
        </member>
        <member name="T:Radial.Persist.StorageRouter.StoragePolicyConfigItem">
            <summary>
            Represent the item of storage policy configuration.
            </summary>
        </member>
        <member name="P:Radial.Persist.StorageRouter.StoragePolicyConfigItem.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Radial.Persist.StorageRouter.StoragePolicyConfigItem.StoragePolicy">
            <summary>
            Gets the storage policy instance.
            </summary>
        </member>
        <member name="T:Radial.PerWebRequestLifetimeManager">
            <summary>
            PerWebRequestLifetimeManager
            </summary>
        </member>
        <member name="F:Radial.PerWebRequestLifetimeManager.ItemKey">
            <summary>
            The item key
            </summary>
        </member>
        <member name="M:Radial.PerWebRequestLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>
            the object desired, or null if no such object is currently stored.
            </returns>
        </member>
        <member name="M:Radial.PerWebRequestLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Radial.PerWebRequestLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="T:Radial.RangeValue`1">
            <summary>
            Represents a range of value.
            </summary>
        </member>
        <member name="M:Radial.RangeValue`1.#ctor(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.RangeValue`1"/> class.
            </summary>
            <param name="min">The range minimum value.</param>
            <param name="max">The range maximum value.</param>
        </member>
        <member name="P:Radial.RangeValue`1.Min">
            <summary>
            Gets or sets the range minimum value.
            </summary>
        </member>
        <member name="P:Radial.RangeValue`1.Max">
            <summary>
            Gets or sets the range maximum value.
            </summary>
        </member>
        <member name="T:Radial.KnownFaultException">
            <summary>
            Known fault exception.
            </summary>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Radial.KnownFaultException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.KnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Radial.KnownFaultException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="T:Radial.Logger">
            <summary>
            Log class.
            </summary>
        </member>
        <member name="F:Radial.Logger.S_IsStart">
            <summary>
            whether logger is started
            </summary>
        </member>
        <member name="M:Radial.Logger.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Radial.Logger"/> class from being created.
            </summary>
        </member>
        <member name="M:Radial.Logger.#ctor(System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:Radial.Logger"/> class from being created.
            </summary>
            <param name="logName">Name of the logger.</param>
        </member>
        <member name="M:Radial.Logger.Start">
            <summary>
            Starts the log component.
            </summary>
        </member>
        <member name="M:Radial.Logger.GetInstance(System.String)">
            <summary>
            Gets the specified log instance.
            </summary>
            <param name="logName">The log name.</param>
            <returns>log instance.</returns>
        </member>
        <member name="M:Radial.Logger.Debug(System.String,System.Object[])">
            <summary>
            Logs a message string with the Debug level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Debug(System.Exception)">
            <summary>
            Logs a message string with the Debug level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Debug level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Info(System.String,System.Object[])">
            <summary>
            Logs a message string with the Info level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Info(System.Exception)">
            <summary>
            Logs a message string with the Info level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Info level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Warn(System.String,System.Object[])">
            <summary>
            Logs a message string with the Warn level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Warn(System.Exception)">
            <summary>
            Logs a message string with the Warn level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Warn level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Error(System.String,System.Object[])">
            <summary>
            Logs a message string with the Error level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Error(System.Exception)">
            <summary>
            Logs a message string with the Error level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Error level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Logs a message string with the Fatal level.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Radial.Logger.Fatal(System.Exception)">
            <summary>
            Logs a message string with the Fatal level.
            </summary>
            <param name="exception">The exception obj.</param>
        </member>
        <member name="M:Radial.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message string with the Fatal level.
            </summary>
            <param name="exception">The exception obj.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="P:Radial.Logger.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="P:Radial.Logger.Default">
            <summary>
            Gets the default log instance.
            </summary>
        </member>
        <member name="T:Radial.Param.AppParam">
            <summary>
            The application parameter and configuration static class.
            </summary>
        </member>
        <member name="M:Radial.Param.AppParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return its value, otherwise return string.Empty.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.AppParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.Save(System.String,System.Object)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.AppParam.Save(System.String,System.String,System.Object)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.AppParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueBoolean(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueBoolean(System.String,System.Boolean)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDecimal(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDecimal(System.String,System.Decimal)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDouble(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueDouble(System.String,System.Double)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt32(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt32(System.String,System.Int32)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt64(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueInt64(System.String,System.Int64)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueSingle(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise throw an exception.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetValueSingle(System.String,System.Single)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="defaultValue">The default value when param value empty or can not convert.</param>
            <returns>
            If path exists, return its value, otherwise return default value.
            </returns>
        </member>
        <member name="M:Radial.Param.AppParam.GetObjectString(System.Object)">
            <summary>
            Gets the object string.
            </summary>
            <param name="obj">The obj.</param>
            <returns>If object is null return string.Empty, otherwise return the string value of object.</returns>
        </member>
        <member name="P:Radial.Param.AppParam.Instance">
            <summary>
            Get the IParam instance
            </summary>
        </member>
        <member name="T:Radial.Param.ConfigurationParam">
            <summary>
            ConfigurationManager param class.
            </summary>
        </member>
        <member name="T:Radial.Param.IParam">
            <summary>
            IParam interface.
            </summary>
        </member>
        <member name="M:Radial.Param.IParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.IParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return the object, otherwise return null.</returns>
        </member>
        <member name="M:Radial.Param.IParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path exists, return its value, otherwise return string.Empty.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>If data exists, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>If path matches, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>If path matches, return an objects list, otherwise return an empty list.</returns>
        </member>
        <member name="M:Radial.Param.IParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.IParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.IParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.NormalizeAppSettings">
            <summary>
            Normalizes the app settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            /// <returns>If path exists, return its value, otherwise return string.Empty.</returns>
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Create(System.String,System.String,System.String)">
            <summary>
            Create new param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Update(System.String,System.String,System.String)">
            <summary>
            Update param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The new description.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.ConfigurationParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Radial.Param.ParamObject">
            <summary>
            Repersents param data contract.
            </summary>
        </member>
        <member name="F:Radial.Param.ParamObject.PathSeparator">
            <summary>
            The path separator.
            </summary>
        </member>
        <member name="F:Radial.Param.ParamObject.PathRegexPattern">
            <summary>
            The path regex pattern
            </summary>
        </member>
        <member name="F:Radial.Param.ParamObject.XmlNs">
            <summary>
            The Xml namespace.
            </summary>
        </member>
        <member name="M:Radial.Param.ParamObject.IsPathValid(System.String)">
            <summary>
            Determine whether the specified path is valid.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.ParamObject.NormalizePath(System.String)">
            <summary>
            Normalize the path.
            </summary>
            <param name="path">The path.</param>
            <returns>
            The path after process.
            </returns>
        </member>
        <member name="M:Radial.Param.ParamObject.GetParentPath(System.String)">
            <summary>
            Get the parent path.
            </summary>
            <param name="path">The path.</param>
            <returns>Returns parent path if exists, otherwise return String.Empty.</returns>
        </member>
        <member name="M:Radial.Param.ParamObject.GetParamName(System.String)">
            <summary>
            Gets the name of the param.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.ParamObject.BuildPath(System.String[])">
            <summary>
            Build param path depends on path levels.
            </summary>
            <param name="levels">The path levels.</param>
            <returns>A param path.</returns>
        </member>
        <member name="P:Radial.Param.ParamObject.Path">
            <summary>
            Gets or sets param path.
            </summary>
        </member>
        <member name="P:Radial.Param.ParamObject.Description">
            <summary>
            Gets or sets param description.
            </summary>
        </member>
        <member name="P:Radial.Param.ParamObject.Value">
            <summary>
            Gets or sets param value.
            </summary>
        </member>
        <member name="P:Radial.Param.ParamObject.ContainsNext">
            <summary>
            Gets or sets a value indicating whether contains next level(descendant) param objects.
            </summary>
            <value>
              <c>true</c> if contains next level(descendant) param objects; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Param.XmlParam">
            <summary>
            Xml param class.
            </summary>
        </member>
        <member name="M:Radial.Param.XmlParam.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Param.XmlParam"/> class.
            </summary>
        </member>
        <member name="M:Radial.Param.XmlParam.Initial(System.String)">
            <summary>
            Initials the specified config file path.
            </summary>
            <param name="configFilePath">The config file path.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.BuildXName(System.String)">
            <summary>
            Builds the name with xmlns.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.LoadObject(System.Xml.Linq.XElement)">
            <summary>
            Loads the param object from XElement.
            </summary>
            <param name="e">The XElement.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.GetElement(System.String)">
            <summary>
            Gets the element.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.RecursiveCreateParent(System.String)">
            <summary>
            Recursives the create parent.
            </summary>
            <param name="childPath">The child path.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Create(System.String,System.String,System.String)">
            <summary>
            Create new param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Update(System.String,System.String,System.String)">
            <summary>
            Update param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The new description.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Exists(System.String)">
            <summary>
            Determine whether the specified param object is exists.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
              <c>true</c> if the specified path is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Get(System.String)">
            <summary>
            Get param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.GetValue(System.String)">
            <summary>
            Get the param value.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path exists, return its value, otherwise return string.Empty.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Next(System.String)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Next(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get next level objects.
            </summary>
            <param name="currentPath">The current parameter path (case insensitive and list all of first level objects when it sets to string.Empty or null).</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If data exists, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Search(System.String)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Search(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Search objects.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="pageSize">The list size per page.</param>
            <param name="pageIndex">The index of page.</param>
            <param name="objectTotal">The object total.</param>
            <returns>
            If path matches, return an objects list, otherwise return an empty list.
            </returns>
        </member>
        <member name="M:Radial.Param.XmlParam.Save(System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Save(System.String,System.String,System.String)">
            <summary>
            Save param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Radial.Param.XmlParam.Delete(System.String)">
            <summary>
            Delete param object.
            </summary>
            <param name="path">The parameter path (case insensitive) or configuration name.</param>
        </member>
        <member name="P:Radial.Param.XmlParam.ConfigurationPath">
            <summary>
            Gets the configuration path.
            </summary>
        </member>
        <member name="P:Radial.Param.XmlParam.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:Radial.Pinyin">
            <summary>
            Pinyin tool for Chinese characters.
            </summary>
        </member>
        <member name="M:Radial.Pinyin.ConvertToPinyin(System.String)">
            <summary>
            Convert characters to Pinyin.
            </summary>
            <param name="characters">The input characters.</param>
            <returns>
            Pinyin string.
            </returns>
        </member>
        <member name="M:Radial.Pinyin.ConvertToPinyin(System.String,System.String)">
            <summary>
            Convert characters to Pinyin.
            </summary>
            <param name="characters">The input characters.</param>
            <param name="separator">The Pinyin separator.</param>
            <returns>
            Pinyin string.
            </returns>
        </member>
        <member name="T:Radial.RandomCode">
            <summary>
            Random code class.
            </summary>
        </member>
        <member name="M:Radial.RandomCode.Create(System.Int32)">
            <summary>
            Create random string.
            </summary>
            <param name="length">The length of random code.</param>
            <returns>New random string.</returns>
        </member>
        <member name="P:Radial.RandomCode.NewInstance">
            <summary>
            Initializes a new instance of the System.Random class.
            </summary>
        </member>
        <member name="T:Radial.Security.CryptoProvider">
            <summary>
            Crypto provider
            </summary>
        </member>
        <member name="M:Radial.Security.CryptoProvider.XorEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypt using XOR.
            </summary>
            <param name="inputBytes">The input bytes.</param>
            <param name="encryptKey">The encrypt key bytes.</param>
            <returns>The ciphertext in binary format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.SHA1Encrypt(System.String)">
            <summary>
            SHA1 encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.SHA1Encrypt(System.String,System.Text.Encoding)">
            <summary>
            SHA1 encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="e">The encoding of cleartext.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.SHA1Encrypt(System.Byte[])">
            <summary>
            SHA1 encrypt.
            </summary>
            <param name="clearTextBytes">The cleartext.</param>
            <returns>The ciphertext in binary format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.MD5Encrypt(System.String)">
            <summary>
            MD5 encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.MD5Encrypt(System.String,System.Text.Encoding)">
            <summary>
            MD5 encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="e">The encoding of cleartext.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.MD5Encrypt(System.Byte[])">
            <summary>
            MD5 encrypt.
            </summary>
            <param name="clearTextBytes">The cleartext.</param>
            <returns>The ciphertext in binary format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESEncrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESEncrypt(System.String,System.Text.Encoding,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="e">The encoding of cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESEncrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES encrypt.
            </summary>
            <param name="clearBytes">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>The ciphertext in Base64 string format.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESDecrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES decrypt.
            </summary>
            <param name="encryptedText">The ciphertext in Base64 string format.</param>
            <param name="key">The encryption key.</param>
            <returns>The cleartext.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.DESDecrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            DES decrypt.
            </summary>
            <param name="encryptedBytes">The ciphertext in binary format.</param>
            <param name="key">The encryption key.</param>
            <returns>The cleartext.</returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelEncrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelEncrypt(System.String,System.Text.Encoding,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael encrypt.
            </summary>
            <param name="clearText">The cleartext.</param>
            <param name="e">The encoding of cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelEncrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael encrypt.
            </summary>
            <param name="clearBytes">The cleartext.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The ciphertext in Base64 string format.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelDecrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael decrypt.
            </summary>
            <param name="encryptedText">The ciphertext in Base64 string format</param>
            <param name="key">The encryption key.</param>
            <returns>
            The cleartext.
            </returns>
        </member>
        <member name="M:Radial.Security.CryptoProvider.RijndaelDecrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Rijndael decrypt.
            </summary>
            <param name="encryptedBytes">The ciphertext in binary format.</param>
            <param name="key">The encryption key.</param>
            <returns>
            The cleartext in binary format.
            </returns>
        </member>
        <member name="T:Radial.Security.X509CertificateProvider">
            <summary>
             X.509 certificate provider class.
            </summary>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="certFilePath">The certificate file path.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="certFilePath">The certificate file path.</param>
            <param name="password">The certificate password.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="rawData">The raw data.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Security.X509CertificateProvider"/> class.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
            <summary>
            Exports the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Boolean)">
            <summary>
            Exports the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="usePassword">if set to <c>true</c> [use password].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.Verify">
            <summary>
            Performs a X.509 chain validation using basic validation policy.
            </summary>
            <returns>true if the validation succeeds; false if the validation fails.</returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.String)">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.String,System.Text.Encoding)">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePublicKey(System.Byte[],System.Boolean)">
            <summary>
            Encrypts the use public key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.String)">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.String,System.Text.Encoding)">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePublicKey(System.Byte[],System.Boolean)">
            <summary>
            Decrypts the use public key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePrivateKey(System.String)">
            <summary>
            Encrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePrivateKey(System.String,System.Text.Encoding)">
            <summary>
            Encrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePrivateKey(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Encrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.EncryptUsePrivateKey(System.Byte[],System.Boolean)">
            <summary>
            Encrypts the use private key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePrivateKey(System.String)">
            <summary>
            Decrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePrivateKey(System.String,System.Text.Encoding)">
            <summary>
            Decrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePrivateKey(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Decrypts the use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.DecryptUsePrivateKey(System.Byte[],System.Boolean)">
            <summary>
            Decrypts the use private key.
            </summary>
            <param name="rgb">The RGB.</param>
            <param name="fOAEP">if set to <c>true</c> [f OAEP].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePublicKey(System.String)">
            <summary>
            Creates the signature use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePublicKey(System.String,System.Text.Encoding)">
            <summary>
            Creates the signature use public key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePublicKey(System.Byte[])">
            <summary>
            Creates the signature use public key.
            </summary>
            <param name="msgBytes">The MSG bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePrivateKey(System.String)">
            <summary>
            Creates the signature use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePrivateKey(System.String,System.Text.Encoding)">
            <summary>
            Creates the signature use private key.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.CreateSignatureUsePrivateKey(System.Byte[])">
            <summary>
            Creates the signature use private key.
            </summary>
            <param name="msgBytes">The MSG bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePublicKey(System.String,System.String)">
            <summary>
            Verifies the signature use public key.
            </summary>
            <param name="dataStr">The data STR.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePublicKey(System.String,System.String,System.Text.Encoding)">
            <summary>
            Verifies the signature use public key.
            </summary>
            <param name="dataStr">The data STR.</param>
            <param name="signature">The signature.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePublicKey(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature use public key.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePrivateKey(System.String,System.String)">
            <summary>
            Verifies the signature use private key.
            </summary>
            <param name="dataStr">The data STR.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePrivateKey(System.String,System.String,System.Text.Encoding)">
            <summary>
            Verifies the signature use private key.
            </summary>
            <param name="dataStr">The data STR.</param>
            <param name="signature">The signature.</param>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Security.X509CertificateProvider.VerifySignatureUsePrivateKey(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature use private key.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="T:Radial.Serialization.BinarySerializer">
            <summary>
            Binary serializer.
            </summary>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serializes object to binary array.
            </summary>
            <param name="obj">The obj instance.</param>
            <returns>The binary array.</returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Serialize``1(``0)">
            <summary>
            Serializes object to binary array.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The obj instance.</param>
            <returns>The binary array.</returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes binary array to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="binary">The binary array.</param>
            <returns>
            If the binary array is not null return the object, otherwise return type default value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes binary array to object.
            </summary>
            <param name="binary">The binary array.</param>
            <returns>
            If the binary array is not null return the object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.TryDeserialize``1(System.Byte[],``0@)">
            <summary>
            Deserializes binary array to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="binary">The binary array.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="M:Radial.Serialization.BinarySerializer.TryDeserialize(System.Byte[],System.Object@)">
            <summary>
            Deserializes binary array to object.
            </summary>
            <param name="binary">The binary array.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="T:Radial.Serialization.Converters.BooleanJsonConverter">
            <summary>
            Converter boolean value to 0 or 1
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.BooleanJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.BooleanJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.BooleanJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.Converters.DateJsonConverter">
            <summary>
            Date json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Serialization.Converters.DateJsonConverter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.Converters.DateTimeJsonConverter">
            <summary>
            DateTime json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Serialization.Converters.DateTimeJsonConverter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter">
            <summary>
            DateTime with milliseconds json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter"/> class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.DateTimeMillisecondJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.JsonSerializer">
            <summary>
            Json serializer.
            </summary>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Serialize``1(``0)">
            <summary>
            Serialize to json string.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="o">The object.</param>
            <returns>
            Json string.
            </returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize to json string.
            </summary>
            <param name="o">The object.</param>
            <returns>Json string.</returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize from json string.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="json">The json string.</param>
            <returns>
            Object instance.
            </returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.Deserialize(System.String)">
            <summary>
            Deserialize from json string.
            </summary>
            <param name="json">The json string.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.TryDeserialize``1(System.String,``0@)">
            <summary>
            Deserialize from json string.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="json">The json string.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="M:Radial.Serialization.JsonSerializer.TryDeserialize(System.String,System.Object@)">
            <summary>
            Deserialize from json string.
            </summary>
            <param name="json">The json string.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="T:Radial.Serialization.Converters.UnixTimeJsonConverter">
            <summary>
            DateTime to Unix TimeStamp json converter class.
            </summary>
        </member>
        <member name="M:Radial.Serialization.Converters.UnixTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.UnixTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.Converters.UnixTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Radial.Serialization.XmlSerializer">
            <summary>
            Xml serializer.
            </summary>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes object to xml.
            </summary>
            <param name="obj">The obj instance.</param>
            <param name="objType">The type of the object.</param>
            <returns>The xml string.</returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Serialize``1(``0)">
            <summary>
            Serializes object to xml.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="obj">The obj instance.</param>
            <returns>The xml string.</returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes xml to object.
            </summary>
            <param name="xml">The xml.</param>
            <param name="objType">The type of the object.</param>
            <returns>
            If the xml is not null or empty return object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes xml to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="xml">The xml.</param>
            <returns>
            If the xml is not null or empty return object, otherwise return type default value.
            </returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.TryDeserialize(System.String,System.Type,System.Object@)">
            <summary>
            Deserializes xml to object.
            </summary>
            <param name="xml">The xml.</param>
            <param name="objType">The type of the object.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="M:Radial.Serialization.XmlSerializer.TryDeserialize``1(System.String,``0@)">
            <summary>
            Deserializes xml to object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="xml">The xml.</param>
            <param name="obj">Deserialized object instance.</param>
            <returns>If successful deserialized return True, otherwise return False.</returns>
        </member>
        <member name="T:Radial.Net.SmtpMail">
            <summary>
            Smtp mail class
            </summary>
        </member>
        <member name="M:Radial.Net.SmtpMail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.SmtpMail"/> class by using configuration file settings.
            </summary>
        </member>
        <member name="M:Radial.Net.SmtpMail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.SmtpMail"/> class.
            </summary>
            <param name="host">A System.String that contains the name or IP address of the host used for SMTP transactions.</param>
        </member>
        <member name="M:Radial.Net.SmtpMail.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.SmtpMail"/> class.
            </summary>
            <param name="host">A System.String that contains the name or IP address of the host used for SMTP transactions.</param>
            <param name="port">An System.Int32 greater than zero that contains the port to be used on host.</param>
        </member>
        <member name="M:Radial.Net.SmtpMail.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.SmtpMail"/> class.
            </summary>
            <param name="host">A System.String that contains the name or IP address of the host used for SMTP transactions.</param>
            <param name="port">An System.Int32 greater than zero that contains the port to be used on host.</param>
            <param name="enableSsl">if set to <c>true</c> [enable SSL].</param>
        </member>
        <member name="M:Radial.Net.SmtpMail.BuildToAddressString(System.Net.Mail.MailAddressCollection)">
            <summary>
            Builds to address string.
            </summary>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends mail message.
            </summary>
            <param name="message">The mail message.</param>
            <returns>
            An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.
            </returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.Mail.MailMessage)">
            <summary>
            Sends mail message.
            </summary>
            <param name="senderCertificate">The sender certificate.</param>
            <param name="message">The mail message.</param>
            <returns>
            An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.
            </returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends mail message.
            </summary>
            <param name="message">The mail message.</param>
            <param name="async">if set to <c>true</c> will use asynchronous call and always return SmtpStatusCode.Ok.</param>
            <returns>
            An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.
            </returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends mail message.
            </summary>
            <param name="senderCertificate">The sender certificate.</param>
            <param name="message">The mail message.</param>
            <param name="async">if set to <c>true</c> will use asynchronous call and always return SmtpStatusCode.Ok.</param>
            <returns>
            An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.
            </returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Net.NetworkCredential,System.Net.Mail.MailMessage)">
            <summary>
            Sends mail message.
            </summary>
            <param name="senderCredential">The sender credential.</param>
            <param name="message">The mail message.</param>
            <returns>An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.</returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Net.NetworkCredential,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.Mail.MailMessage)">
            <summary>
            Sends mail message.
            </summary>
            <param name="senderCredential">The sender credential.</param>
            <param name="senderCertificate">The sender certificate.</param>
            <param name="message">The mail message.</param>
            <returns>An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.</returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Net.NetworkCredential,System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends mail message.
            </summary>
            <param name="senderCredential">The sender credential.</param>
            <param name="message">The mail message.</param>
            <param name="async">if set to <c>true</c> will use asynchronous call and always return SmtpStatusCode.Ok.</param>
            <returns>An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.</returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.Send(System.Net.NetworkCredential,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends mail message.
            </summary>
            <param name="senderCredential">The sender credential.</param>
            <param name="senderCertificate">The sender certificate.</param>
            <param name="message">The mail message.</param>
            <param name="async">if set to <c>true</c> will use asynchronous call and always return SmtpStatusCode.Ok.</param>
            <returns>An System.Net.Mail.SmtpStatusCode value that indicates the error that occurred.</returns>
        </member>
        <member name="M:Radial.Net.SmtpMail.SendCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Sends the completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Radial.Net.SmtpMail.SenderCredential">
            <summary>
            Gets the sender credential.
            </summary>
        </member>
        <member name="P:Radial.Net.SmtpMail.ConfigurationSection">
            <summary>
            Gets the smtp section in configuration file.
            </summary>
        </member>
        <member name="P:Radial.Net.SmtpMail.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:Radial.SystemVariables">
            <summary>
            Represents a class that contains system variables
            </summary>
        </member>
        <member name="F:Radial.SystemVariables.LocalHostIP">
            <summary>
            Local hot ip
            </summary>
        </member>
        <member name="F:Radial.SystemVariables.S_BaseDirectory">
            <summary>
            Application base directory
            </summary>
        </member>
        <member name="F:Radial.SystemVariables.S_BasicConfigurationDirectory">
            <summary>
            Application base configuration directory
            </summary>
        </member>
        <member name="M:Radial.SystemVariables.#cctor">
            <summary>
            Initializes the <see cref="T:Radial.SystemVariables"/> class.
            </summary>
        </member>
        <member name="M:Radial.SystemVariables.GetConfigurationPath(System.String)">
            <summary>
            Gets the full path of configuration file.
            </summary>
            <param name="fileName">The configuration file name contains extension.</param>
            <returns>The full path of configuration file.</returns>
        </member>
        <member name="P:Radial.SystemVariables.BaseDirectory">
            <summary>
            Gets application base directory
            </summary>
        </member>
        <member name="P:Radial.SystemVariables.BasicConfigurationDirectory">
            <summary>
            Gets or sets application base configuration directory
            </summary>
        </member>
        <member name="T:Radial.Toolkits">
            <summary>
            Toolkits class.
            </summary>
        </member>
        <member name="M:Radial.Toolkits.GetEnumItem``1(System.Nullable{System.Int32})">
            <summary>
            Gets the enumeration item.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumValue">The enumeration value.</param>
            <returns>The enumeration item, if not match throw a NotSupportedException.</returns>
        </member>
        <member name="M:Radial.Toolkits.GetEnumItemDescription``1(System.Nullable{``0})">
            <summary>
            Gets the enumeration item description.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumValue">The enumeration value.</param>
            <returns>
            The item description, if not find EnumItemAttribute return String.Empty.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.ToIntArray(System.String)">
            <summary>
            Convert ip string to int array.
            </summary>
            <param name="ip">The ip string.</param>
            <returns>int array of ip string.</returns>
        </member>
        <member name="M:Radial.Toolkits.IsIncludedInScope(System.String,System.String,System.String)">
            <summary>
            Determines whether the ip is in range.
            </summary>
            <param name="ip">The ip string</param>
            <param name="beginIp">The range starting ip</param>
            <param name="endIp">The range ending ip</param>
            <returns><c>true</c> if the input ip string is in range ; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Radial.Toolkits.FirstCharUpperCase(System.String)">
            <summary>
            Upper case the first char of the input string.
            </summary>
            <param name="input">The input string.</param>
            <returns>new string.</returns>
        </member>
        <member name="M:Radial.Toolkits.Compress(System.String)">
            <summary>
            Compress.
            </summary>
            <param name="str">The input string.</param>
            <returns>Compressed string.</returns>
        </member>
        <member name="M:Radial.Toolkits.Compress(System.String,System.Text.Encoding)">
            <summary>
            Compress
            </summary>
            <param name="str">The input string.</param>
            <param name="e">The encoding of input string.</param>
            <returns>Compressed string.</returns>
        </member>
        <member name="M:Radial.Toolkits.Compress(System.Byte[])">
            <summary>
            Compress
            </summary>
            <param name="data">The input data.</param>
            <returns>Compressed data.</returns>
        </member>
        <member name="M:Radial.Toolkits.Decompress(System.String)">
            <summary>
            Decompress.
            </summary>
            <param name="str">The input string.</param>
            <returns>Decompressed string.</returns>
        </member>
        <member name="M:Radial.Toolkits.Decompress(System.String,System.Text.Encoding)">
            <summary>
            Decompress.
            </summary>
            <param name="str">The input string.</param>
            <param name="e">The encoding of input string.</param>
            <returns>Decompressed string.</returns>
        </member>
        <member name="M:Radial.Toolkits.Decompress(System.Byte[])">
            <summary>
            Decompress.
            </summary>
            <param name="data">The input data.</param>
            <returns>Decompressed data.</returns>
        </member>
        <member name="M:Radial.Toolkits.ToBase64String(System.String)">
            <summary>
            Convert to Base64 string(UTF-8 encoding).
            </summary>
            <param name="data">The input string.</param>
            <returns>Base64 string.</returns>
        </member>
        <member name="M:Radial.Toolkits.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert to Base64 string.
            </summary>
            <param name="data">The input string.</param>
            <param name="e">The encoding of input string.</param>
            <returns>Base64 string.</returns>
        </member>
        <member name="M:Radial.Toolkits.ToBase64String(System.Byte[])">
            <summary>
            Convert to Base64 string.
            </summary>
            <param name="data">The input data.</param>
            <returns>Base64 string.</returns>
        </member>
        <member name="M:Radial.Toolkits.FromBase64String(System.String)">
            <summary>
            Convert to string from Base64 format(UTF-8 encoding).
            </summary>
            <param name="base64Str">The input string.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Radial.Toolkits.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            Convert to string from Base64 format.
            </summary>
            <param name="base64Str">The input string.</param>
            <param name="e">The encoding of input string.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Radial.Toolkits.FromBase64StringToBytes(System.String)">
            <summary>
            Convert to byte array from Base64 format.
            </summary>
            <param name="base64Str">The input data.</param>
            <returns>Decoded binary array.</returns>
        </member>
        <member name="M:Radial.Toolkits.GetPingReplies(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the ping replies.
            </summary>
            <param name="host">The host.</param>
            <param name="count">The ping count.</param>
            <param name="interval">The ping interval milliseconds.</param>
            <param name="bytes">The buffer bytes.</param>
            <param name="timeout">The timeout milliseconds.</param>
            <param name="ttl">The TTL.</param>
            <param name="dontFragment">if set to <c>true</c> [dont fragment].</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Toolkits.FromUnixTimeStamp(System.Int64)">
            <summary>
            Convert Unix time stamp to local time..
            </summary>
            <param name="timeStamp">The Unix time stamp.</param>
            <returns>
            Local System.DateTime struct.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.FromUnixTimeStamp(System.Int64,System.TimeZoneInfo)">
            <summary>
            Convert Unix time stamp to local time.
            </summary>
            <param name="timeStamp">The Unix time stamp.</param>
            <param name="localTimeZoneInfo">The TimeZoneInfo object of the local time.</param>
            <returns>
            Local System.DateTime struct.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.ToUnixTimeStamp(System.DateTime)">
            <summary>
            Convert local time to Unix time stamp.
            </summary>
            <param name="time">The input local time.</param>
            <returns>
            The Unix time stamp.
            </returns>
        </member>
        <member name="M:Radial.Toolkits.ToUnixTimeStamp(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Convert local time to Unix time stamp.
            </summary>
            <param name="time">The input local time.</param>
            <param name="localTimeZoneInfo">The TimeZoneInfo object of the input local time.</param>
            <returns>
            The Unix time stamp.
            </returns>
        </member>
        <member name="T:Radial.Validator">
            <summary>
            The validation class.
            </summary>
        </member>
        <member name="M:Radial.Validator.IsEmail(System.String)">
            <summary>
            Determines whether the specified source is email.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is email; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasEmail(System.String)">
            <summary>
            Determines whether the specified source has email.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has email; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsUrl(System.String)">
            <summary>
            Determines whether the specified source is URL.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is URL; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasUrl(System.String)">
            <summary>
            Determines whether the specified source has URL.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has URL; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsDateTime(System.String)">
            <summary>
            Determines whether [is date time] [the specified source].
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is date time] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsMobile(System.String)">
            <summary>
            Determines whether the specified source is mobile.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is mobile; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasMobile(System.String)">
            <summary>
            Determines whether the specified source has mobile.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has mobile; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIP(System.String)">
            <summary>
            Determines whether the specified source is IP.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is IP; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasIP(System.String)">
            <summary>
            Determines whether the specified source has IP.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source has IP; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIDCard(System.String)">
            <summary>
            Determines whether [is ID card] [the specified id].
            </summary>
            <param name="Id">The id.</param>
            <returns>
              <c>true</c> if [is ID card] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIDCard18(System.String)">
            <summary>
            Determines whether [is ID card18] [the specified id].
            </summary>
            <param name="Id">The id.</param>
            <returns>
              <c>true</c> if [is ID card18] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsIDCard15(System.String)">
            <summary>
            Determines whether [is ID card15] [the specified id].
            </summary>
            <param name="Id">The id.</param>
            <returns>
              <c>true</c> if [is ID card15] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsInt(System.String)">
            <summary>
            Determines whether the specified source is int.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is int; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsTel(System.String)">
            <summary>
            Determines whether the specified source is chinese tel.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if the specified source is tel; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.IsPostCode(System.String)">
            <summary>
            Determines whether [is post code] [the specified source].
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is post code] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Radial.Validator.HasChinese(System.String)">
            <summary>
            Determines whether the specified source contains chinese character.
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if contains chinese characters; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Radial.Net.FileFormData">
            <summary>
            The Http file form data. 
            </summary>
        </member>
        <member name="T:Radial.Net.IMultipartFormData">
            <summary>
            An interface to HTTP multipart/form-data request data.
            </summary>
        </member>
        <member name="M:Radial.Net.IMultipartFormData.Write(System.IO.Stream)">
            <summary>
            Write data to the request stream
            </summary>
            <param name="reqStream">The request stream.</param>
        </member>
        <member name="P:Radial.Net.IMultipartFormData.ParamName">
            <summary>
            Gets the name of the post parameter.
            </summary>
        </member>
        <member name="P:Radial.Net.IMultipartFormData.Encoding">
            <summary>
            Gets or sets the encoding of post data bytes.
            </summary>
        </member>
        <member name="F:Radial.Net.FileFormData.DefaultContentType">
            <summary>
            The default ContentType
            </summary>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="paramName">The post parameter name.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="contentType">The post content type.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="contentType">The post content type.</param>
            <param name="encoding">The encoding of post data bytes.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileStream">The file stream.</param>
            <param name="paramName">The post parameter name.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileStream">The post file stream.</param>
            <param name="paramName">The post parameter name.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileStream">The post file stream.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="contentType">The post content type.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.IO.Stream,System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileStream">The post file stream.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="contentType">The post content type.</param>
            <param name="encoding">The encoding of post data bytes.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileContent">The post file content.</param>
            <param name="paramName">The post parameter name.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileContent">The post file content.</param>
            <param name="paramName">The post parameter name.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileContent">The post file content.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="contentType">The post file content type.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.#ctor(System.String,System.Byte[],System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="fileName">The post file name.</param>
            <param name="fileContent">The post file content.</param>
            <param name="paramName">The post parameter name.</param>
            <param name="contentType">The post file content type.</param>
            <param name="encoding">The encoding of post data bytes.</param>
        </member>
        <member name="M:Radial.Net.FileFormData.Write(System.IO.Stream)">
            <summary>
            Write data to the request stream
            </summary>
            <param name="reqStream">The request stream.</param>
        </member>
        <member name="P:Radial.Net.FileFormData.ParamName">
            <summary>
            Gets the name of the post parameter.
            </summary>
        </member>
        <member name="P:Radial.Net.FileFormData.Encoding">
            <summary>
            Gets or sets the encoding of post data bytes.
            </summary>
        </member>
        <member name="T:Radial.Net.PlainTextFormData">
            <summary>
            The Http plain text form data. 
            </summary>
        </member>
        <member name="M:Radial.Net.PlainTextFormData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.PlainTextFormData"/> class.
            </summary>
            <param name="paramName">The post parameter name.</param>
            <param name="value">The post parameter value.</param>
        </member>
        <member name="M:Radial.Net.PlainTextFormData.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.PlainTextFormData"/> class.
            </summary>
            <param name="paramName">The post parameter name.</param>
            <param name="value">The post parameter value.</param>
            <param name="encoding">The encoding of post data bytes.</param>
        </member>
        <member name="M:Radial.Net.PlainTextFormData.Write(System.IO.Stream)">
            <summary>
            Write data to the request stream
            </summary>
            <param name="reqStream">The request stream.</param>
        </member>
        <member name="P:Radial.Net.PlainTextFormData.ParamName">
            <summary>
            Gets the name of the post parameter.
            </summary>
        </member>
        <member name="P:Radial.Net.PlainTextFormData.Encoding">
            <summary>
            Gets or sets the encoding of post data bytes.
            </summary>
        </member>
        <member name="T:Radial.Net.HttpResponseObj">
            <summary>
            The wrapper object of HTTP web response.
            </summary>
        </member>
        <member name="M:Radial.Net.HttpResponseObj.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.HttpResponseObj"/> class.
            </summary>
            <param name="webResp">The HttpWebResponse object.</param>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.Code">
            <summary>
            Gets the response status code.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.RawData">
            <summary>
            Gets the response raw data.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.CharacterSet">
            <summary>
            Gets the response character set.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.Text">
            <summary>
            Gets the response text.
            </summary>
        </member>
        <member name="P:Radial.Net.HttpResponseObj.Headers">
            <summary>
            Gets the response headers.
            </summary>
        </member>
        <member name="T:Radial.Net.HttpWebClient">
            <summary>
            Contains HTTP web request methods.
            </summary>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Get(System.String)">
            <summary>
            Http Get method
            </summary>
            <param name="url">The request url(include query string).</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Get(System.Net.HttpWebRequest)">
            <summary>
            Http Get method
            </summary>
            <param name="request">The request(include query string).</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.String)">
            <summary>
            Http Post method use "application/x-www-form-urlencoded" content type.
            </summary>
            <param name="url">The request url(include query string).</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.Net.HttpWebRequest,System.String)">
            <summary>
            Http Post method use "application/x-www-form-urlencoded" content type.
            </summary>
            <param name="request">The request(exclude query string).</param>
            <param name="queryString">The query string.</param>
            <returns>
            The HttpResponseObj instance(never null).
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.String,Radial.Net.IMultipartFormData[])">
            <summary>
            Http Post method use "multipart/form-data" content type.
            </summary>
            <param name="url">The request url(exclude query string).</param>
            <param name="postDatas">The post data array.</param>
            <returns>
            The HttpResponseObj instance(never null)
            </returns>
        </member>
        <member name="M:Radial.Net.HttpWebClient.Post(System.Net.HttpWebRequest,Radial.Net.IMultipartFormData[])">
            <summary>
            Http Post method use "multipart/form-data" content type.
            </summary>
            <param name="request">The request(exclude query string).</param>
            <param name="datas">The post data array.</param>
            <returns>
            The HttpResponseObj instance(never null)
            </returns>
        </member>
        <member name="T:Radial.Base36Encoder">
            <summary>
            Base36 Encoder Class
            </summary>
        </member>
        <member name="F:Radial.Base36Encoder.Alphabet">
            <summary>
            Base36 alphabet.
            </summary>
        </member>
        <member name="M:Radial.Base36Encoder.ToBase36String(System.UInt64)">
            <summary>
            Convert long value to Base36 string.
            </summary>
            <param name="value">The input value.</param>
            <returns>The Base36 string.</returns>
        </member>
        <member name="M:Radial.Base36Encoder.FromBase36String(System.String)">
            <summary>
            Convert Base36 string to long value.
            </summary>
            <param name="input">The input Base36 string.</param>
            <returns>The long value.</returns>
        </member>
        <member name="T:Radial.Web.FormsAuth">
            <summary>
            Integrated common functions for forms authentication.
            </summary>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(System.String,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="userName">The user name.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(System.String,System.Boolean,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="userName">The user name.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
            <param name="redirect">whether need to redirect from login page.</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(Radial.Web.UserIdentity,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="identity">The user identity.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignIn(Radial.Web.UserIdentity,System.Boolean,System.Boolean)">
            <summary>
            User sign in.
            </summary>
            <param name="identity">The user identity.</param>
            <param name="createPersistentCookie">if set to <c>true</c> [create persistent cookie].</param>
            <param name="redirect">if set to <c>true</c> [redirect].</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.RedirectToLoginPage">
            <summary>
            Redirects the browser to the login URL.
            </summary>
        </member>
        <member name="M:Radial.Web.FormsAuth.RedirectToLoginPage(System.String)">
            <summary>
            Redirects the browser to the login URL with the specified query string.
            </summary>
            <param name="extraQueryString">The query string to include with the redirect URL.</param>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignOut">
            <summary>
            User sign out.
            </summary>
        </member>
        <member name="M:Radial.Web.FormsAuth.SignOut(System.Boolean)">
            <summary>
            User sign out.
            </summary>
            <param name="redirect">whether need to redirect to login page.</param>
        </member>
        <member name="P:Radial.Web.FormsAuth.DefaultUrl">
            <summary>
            Gets the URL that the System.Web.Security.FormsAuthentication class willredirect to if no redirect URL is specified.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.LoginUrl">
            <summary>
            The URL for the login page that the System.Web.Security.FormsAuthentication class will redirect to.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.FormsCookieName">
            <summary>
            Gets the name of the cookie used to store the forms-authentication ticket.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.FormsCookiePath">
            <summary>
            Gets the path for the forms-authentication cookie.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.CookieDomain">
            <summary>
            Gets the value of the domain of the forms-authentication cookie.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.CookieMode">
            <summary>
            Gets a value that indicates whether the application is configured for cookieless forms authentication.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.CookiesSupported">
            <summary>
            Gets a value that indicates whether the application is configured to support cookieless forms authentication.
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.Timeout">
            <summary>
            Gets the timeout value specified in the configuration file (in minutes).
            </summary>
        </member>
        <member name="P:Radial.Web.FormsAuth.SlidingExpiration">
            <summary>
            Gets a value indicating whether sliding expiration is enabled.
            </summary>
        </member>
        <member name="T:Radial.Web.HttpCache">
            <summary>
            Http cache class.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.HttpCache"/> class.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpCache.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.HttpCache"/> class.
            </summary>
            <param name="expirationSeconds">The default expiration seconds.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.HttpCache"/> class.
            </summary>
            <param name="cachePrefix">The cache prefix.</param>
            <param name="expirationSeconds">The default expiration seconds.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.NormalizeKey(System.String)">
            <summary>
            Normalizes the key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Radial.Web.HttpCache.Set(System.String,System.Object)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.Set``1(System.String,``0)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="ts">The cache holding time.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.Get(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <returns>
            If there has matched data, return the cached object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Web.HttpCache.Get``1(System.String)">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <returns>
            If there has matched data, return the cached object, otherwise return null.
            </returns>
        </member>
        <member name="M:Radial.Web.HttpCache.Gets(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Web.HttpCache.Gets``1(System.String[])">
            <summary>
            Retrieve cached data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="keys">The cache keys(case insensitive).</param>
            <returns>If there has matched data, return the cached objects, otherwise return an empty array.</returns>
        </member>
        <member name="M:Radial.Web.HttpCache.Remove(System.String)">
            <summary>
            Remove cache key and its value.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
        </member>
        <member name="M:Radial.Web.HttpCache.Clear">
            <summary>
            Clear cache.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpCache.Set(System.String,System.Object,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="M:Radial.Web.HttpCache.Set``1(System.String,``0,System.Int32)">
            <summary>
            Set cache data.
            </summary>
            <typeparam name="T">The type of cache value.</typeparam>
            <param name="key">The cache key(case insensitive).</param>
            <param name="value">The cache value.</param>
            <param name="cacheSeconds">The cache holding seconds.</param>
        </member>
        <member name="T:Radial.Web.HttpKits">
            <summary>
            Toolkits class for http context
            </summary>
        </member>
        <member name="M:Radial.Web.HttpKits.GetCookie(System.String)">
            <summary>
            Get the cookie
            </summary>
            <param name="name">The cookie name</param>
            <returns>If found return the instance, otherwise return null</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.AddCookie(System.Web.HttpCookie)">
            <summary>
            Add cookie
            </summary>
            <param name="cookie">The cookie instance</param>
        </member>
        <member name="M:Radial.Web.HttpKits.SetCookie(System.Web.HttpCookie)">
            <summary>
            Set cookie
            </summary>
            <param name="cookie">The cookie instance</param>
        </member>
        <member name="M:Radial.Web.HttpKits.RemoveCookie(System.String)">
            <summary>
            Remove cookie
            </summary>
            <param name="name">The cookie name</param>
        </member>
        <member name="M:Radial.Web.HttpKits.SetSession(System.String,System.Object)">
            <summary>
            Set value to HttpSessionState
            </summary>
            <param name="name">The session name</param>
            <param name="value">The session value</param>
        </member>
        <member name="M:Radial.Web.HttpKits.SetSession``1(System.String,``0)">
            <summary>
            Set value to HttpSessionState
            </summary>
            <typeparam name="T">The session value type</typeparam>
            <param name="name">The session name</param>
            <param name="value">The session value</param>
        </member>
        <member name="M:Radial.Web.HttpKits.GetSession(System.String)">
            <summary>
            Get value from HttpSessionState
            </summary>
            <param name="name">The session name</param>
            <returns>The session value</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetSession``1(System.String)">
            <summary>
            Get value from HttpSessionState
            </summary>
            <typeparam name="T">The session value type</typeparam>
            <param name="name">The session name</param>
            <returns>
            The session value
            </returns>
        </member>
        <member name="M:Radial.Web.HttpKits.RemoveSession(System.String)">
            <summary>
            Remove session
            </summary>
            <param name="name">The session name</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Byte[])">
            <summary>
            Write the image bytes to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgBytes">The image bytes.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Byte[],System.String)">
            <summary>
            Write the image bytes to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgBytes">The image bytes.</param>
            <param name="contentType">the content type.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Write the image object to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="image">The image.</param>
            <param name="format">The image format.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Write the image object to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="image">The image.</param>
            <param name="format">The image format.</param>
            <param name="contentType">the content type.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.IO.Stream)">
            <summary>
            Write the image stream to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgStream">The image stream.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteImage(System.IO.Stream,System.String)">
            <summary>
            Write the image stream to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="imgStream">The image stream.</param>
            <param name="contentType">the content type.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WritePlainText(System.String)">
            <summary>
            Write the plain text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="text">The plain text</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WritePlainText(System.String,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the plain text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="text">The plain text</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson``1(``0,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="obj">The object.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson``1(``0,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="obj">The object.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.Object,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The object.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.Object,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The object.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="json">The json text</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteJson(System.String,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the json text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="json">The json text</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml(System.String,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="xml">The xml text</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml(System.Object,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The obj.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml(System.Object,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <param name="obj">The obj.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml``1(``0,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="obj">The obj.</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.WriteXml``1(``0,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Write the xml text to response stream (use return statement to bypass other codes if necessary).
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="obj">The obj.</param>
            <param name="contentType">The content type</param>
            <param name="statusCode">The http response status code(200 by default).</param>
        </member>
        <member name="M:Radial.Web.HttpKits.ResolveParameters(System.Uri)">
            <summary>
            Resolves the string to parameters.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            Parameters collection, if parameter string is empty or null return an empty collection.
            </returns>
        </member>
        <member name="M:Radial.Web.HttpKits.ResolveParameters(System.String)">
            <summary>
            Resolves the string to parameters.
            </summary>
            <param name="paramString">The parameter string with &amp; separator.</param>
            <returns>Parameters collection, if parameter string is empty or null return an empty collection.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetContentType(System.String)">
            <summary>
            Get the file extension corresponding Content-Type
            </summary>
            <param name="fileExtension">The file extension(with dot symbol)</param>
            <returns>If found return the Content-Type string, otherwise return "application/octet-stream" as default</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.MakeAbsoluteUrl(System.String)">
            <summary>
            Makes the relative url to absolute url.
            </summary>
            <param name="relativeUrl">The relative url.</param>
            <returns>The absolute url.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.MakeRelativeUrl(System.String)">
            <summary>
            Makes the absolute url to relative url.
            </summary>
            <param name="absoluteUrl">The absolute url.</param>
            <returns>The relative url.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.Alert(System.Web.UI.Page,System.String)">
            <summary>
            Javascript Alert.
            </summary>
            <param name="page">The page.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.Alert(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Javascript Alert.
            </summary>
            <param name="page">The page.</param>
            <param name="message">The message.</param>
            <param name="redirectUrl">The redirect url.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.RegisterScript(System.Web.UI.Page,System.String)">
            <summary>
            Registers javascript to System.Web.UI.Page
            </summary>
            <param name="page">The page.</param>
            <param name="script">The script.</param>
        </member>
        <member name="M:Radial.Web.HttpKits.StripHtml(System.String)">
            <summary>
            Strip html code from a hypertext string.
            </summary>
            <param name="strHtml">The hypertext string</param>
            <returns>Plain text string</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.EscapeUrl(System.String)">
            <summary>
            Converts a url string to its escaped representation.
            </summary>
            <param name="url">The input url.</param>
            <returns>A System.String that contains the escaped representation of input url.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.UnescapeUrl(System.String)">
            <summary>
            Converts a url string to its unescaped representation.
            </summary>
            <param name="url">The input url.</param>
            <returns>A System.String that contains the unescaped representation of input url.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetLocation(System.String)">
            <summary>
            Gets the location based on ip address.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <returns>If no location matched return string.Empty, otherwise return the location based on ip address.</returns>
        </member>
        <member name="M:Radial.Web.HttpKits.GetClientIPv4Address">
            <summary>
            Get the client IPv4 address.
            </summary>
            <returns>If no error occurs return client IPv4 address, otherwise return string.Empty.</returns>
        </member>
        <member name="P:Radial.Web.HttpKits.CurrentContext">
            <summary>
            Gets the current HttpContext instance.
            </summary>
        </member>
        <member name="P:Radial.Web.HttpKits.IsWebApp">
            <summary>
            Gets a value indicating whether this instance is a web application.
            </summary>
            <value>
            	<c>true</c> if this instance is a web application; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Radial.Web.HttpKnownFaultException">
            <summary>
            Http known fault exception.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpKnownFaultException.#ctor(System.Int32,System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.HttpKnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
            <param name="statusCode">The HTTP status code.</param>
        </member>
        <member name="M:Radial.Web.HttpKnownFaultException.#ctor(System.Int32,System.String,System.Exception,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Web.HttpKnownFaultException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception.</param>
            <param name="statusCode">The HTTP status code.</param>
        </member>
        <member name="P:Radial.Web.HttpKnownFaultException.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="T:Radial.Web.HttpPostedFileExtension">
            <summary>
            Extension class of http posted file.
            </summary>
        </member>
        <member name="M:Radial.Web.HttpPostedFileExtension.ToFileFormData(System.Web.HttpPostedFileBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="postFile">The http posted file.</param>
            <param name="paramName">The post parameter name.</param>
            <returns>The FileFormData instance.</returns>
        </member>
        <member name="M:Radial.Web.HttpPostedFileExtension.ToFileFormData(System.Web.HttpPostedFile,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Radial.Net.FileFormData"/> class.
            </summary>
            <param name="postFile">The http posted file.</param>
            <param name="paramName">The post parameter name.</param>
            <returns>The FileFormData instance.</returns>
        </member>
        <member name="T:Radial.Web.UserIdentity">
            <summary>
            A class contains user data.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Id">
            <summary>
            Gets or sets the user id (ensure the value can be serialized and deserialized with JSON format correctly).
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Name">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Others">
            <summary>
            Gets or sets the additional data of user (ensure the value can be serialized and deserialized with JSON format correctly).
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.IsAuthenticated">
            <summary>
            Gets a value that indicates whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.AuthenticationType">
            <summary>
            Gets the type of authentication used.
            </summary>
        </member>
        <member name="P:Radial.Web.UserIdentity.Current">
            <summary>
            Gets the user of the current principal.
            </summary>
            <exception cref="T:System.Reflection.TargetInvocationException">Can not deserialize to UserIdentity instance from the user data string saved in JSON format.</exception>
        </member>
    </members>
</doc>
